import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixHeadlessV1RedirectSession from './headless-v1-redirect-session-redirects.http';
export var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (LocationType = {}));
/** Currently only `none` and `login` are supported. */
export var Prompt;
(function (Prompt) {
    Prompt["login"] = "login";
    Prompt["none"] = "none";
    Prompt["consent"] = "consent";
    Prompt["select_account"] = "select_account";
})(Prompt || (Prompt = {}));
export var MembersAccountSection;
(function (MembersAccountSection) {
    /** default - account info section in "my account" */
    MembersAccountSection["ACCOUNT_INFO"] = "ACCOUNT_INFO";
    /** My Bookings section in "my account" */
    MembersAccountSection["BOOKINGS"] = "BOOKINGS";
    /** My Orders section in "my account" */
    MembersAccountSection["ORDERS"] = "ORDERS";
    /** Subscriptions section in "my account" */
    MembersAccountSection["SUBSCRIPTIONS"] = "SUBSCRIPTIONS";
    /** Events section in "my account" */
    MembersAccountSection["EVENTS"] = "EVENTS";
})(MembersAccountSection || (MembersAccountSection = {}));
export var AttachPagesResponseStatus;
(function (AttachPagesResponseStatus) {
    /** Invalid value - default */
    AttachPagesResponseStatus["UNKNOWN"] = "UNKNOWN";
    /** Pages were successfully attached */
    AttachPagesResponseStatus["SUCCESS"] = "SUCCESS";
    /** No pages were attached because the site is already published */
    AttachPagesResponseStatus["NO_ACTION"] = "NO_ACTION";
    /** An error occurred, such as site or app not being found */
    AttachPagesResponseStatus["ERROR"] = "ERROR";
})(AttachPagesResponseStatus || (AttachPagesResponseStatus = {}));
export var CallbackType;
(function (CallbackType) {
    /** Invalid value - default */
    CallbackType["UNKNOWN"] = "UNKNOWN";
    /** The callback URL is used for the logout flow */
    CallbackType["LOGOUT"] = "LOGOUT";
    /** The callback URL is used for a checkout flow */
    CallbackType["CHECKOUT"] = "CHECKOUT";
    /** The callback URL is used for the authorize flow */
    CallbackType["AUTHORIZE"] = "AUTHORIZE";
})(CallbackType || (CallbackType = {}));
export var Status;
(function (Status) {
    /** Invalid value - default */
    Status["UNKNOWN"] = "UNKNOWN";
    /** templates were successfully attached */
    Status["SUCCESS"] = "SUCCESS";
    /** An error occurred */
    Status["ERROR"] = "ERROR";
})(Status || (Status = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a URL for redirecting a visitor from an external client site to a Wix page for Wix-managed functionality.
 *
 *
 * The `createRedirectSession()` function enables your external Wix Headless client site, built on any platform, to integrate Wix-managed frontend functionality for specific processes.
 * For example, your site can temporarily redirect a visitor to Wix for authentication, or for a checkout process for a bookings, eCommerce, events, or paid plans transaction.
 *
 * To initiate a redirect session:
 *
 * 1. Call `createRedirectSession()` with the details required for Wix to take care of one specific process (for example, authentication or a bookings checkout). Provide one or more callback URLs, so Wix can redirect the user back to your site as appropriate when the process is over.
 * 1. Redirect your visitor to the URL provided in the response. This URL includes query parameters informing Wix where to redirect the visitor back to on your external site.
 * 1. Make sure the pages at the callback URLs you provided take care of the next stages in your visitor flow.
 * @public
 * @documentationMaturity preview
 * @param options - Options for creating a redirect session.
 * @permissionId WIX_HEADLESS.WIX_URL_CREATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 */
export async function createRedirectSession(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingsCheckout: options?.bookingsCheckout,
        ecomCheckout: options?.ecomCheckout,
        eventsCheckout: options?.eventsCheckout,
        paidPlansCheckout: options?.paidPlansCheckout,
        login: options?.login,
        logout: options?.logout,
        auth: options?.auth,
        storesProduct: options?.storesProduct,
        bookingsBook: options?.bookingsBook,
        callbacks: options?.callbacks,
        preferences: options?.preferences,
    });
    const reqOpts = ambassadorWixHeadlessV1RedirectSession.createRedirectSession(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                bookingsCheckout: '$[0].bookingsCheckout',
                ecomCheckout: '$[0].ecomCheckout',
                eventsCheckout: '$[0].eventsCheckout',
                paidPlansCheckout: '$[0].paidPlansCheckout',
                login: '$[0].login',
                logout: '$[0].logout',
                auth: '$[0].auth',
                storesProduct: '$[0].storesProduct',
                bookingsBook: '$[0].bookingsBook',
                callbacks: '$[0].callbacks',
                preferences: '$[0].preferences',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=headless-v1-redirect-session-redirects.universal.js.map