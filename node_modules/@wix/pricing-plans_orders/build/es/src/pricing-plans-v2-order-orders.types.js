export var PeriodUnit;
(function (PeriodUnit) {
    PeriodUnit["UNDEFINED"] = "UNDEFINED";
    PeriodUnit["DAY"] = "DAY";
    PeriodUnit["WEEK"] = "WEEK";
    PeriodUnit["MONTH"] = "MONTH";
    PeriodUnit["YEAR"] = "YEAR";
})(PeriodUnit || (PeriodUnit = {}));
export var OrderType;
(function (OrderType) {
    OrderType["UNDEFINED"] = "UNDEFINED";
    /** Payments made by the buyer */
    OrderType["ONLINE"] = "ONLINE";
    /** Payments managed manually by the site owner */
    OrderType["OFFLINE"] = "OFFLINE";
    /** Payments managed externally */
    OrderType["EXTERNAL"] = "EXTERNAL";
})(OrderType || (OrderType = {}));
export var OrderMethod;
(function (OrderMethod) {
    OrderMethod["UNKNOWN"] = "UNKNOWN";
    /** Mail Order / Telephone Order transaction */
    OrderMethod["MOTO"] = "MOTO";
    /** Point of Sale transaction */
    OrderMethod["POS"] = "POS";
})(OrderMethod || (OrderMethod = {}));
export var OrderStatus;
(function (OrderStatus) {
    /** Order status undefined */
    OrderStatus["UNDEFINED"] = "UNDEFINED";
    /** Order created, but hasn't been paid for yet. Filtered out in ListOrders response by default. */
    OrderStatus["DRAFT"] = "DRAFT";
    /** Order has been paid for, but the start date is in the future */
    OrderStatus["PENDING"] = "PENDING";
    /** Order is active */
    OrderStatus["ACTIVE"] = "ACTIVE";
    /** Order is paused until site owner resumes it */
    OrderStatus["PAUSED"] = "PAUSED";
    /** Order has ended */
    OrderStatus["ENDED"] = "ENDED";
    /** Order has been canceled */
    OrderStatus["CANCELED"] = "CANCELED";
})(OrderStatus || (OrderStatus = {}));
export var CancellationCause;
(function (CancellationCause) {
    /** Cancellation initiator undefined */
    CancellationCause["UNDEFINED"] = "UNDEFINED";
    /** Order was canceled by site owner (default if canceled by user or service identity) */
    CancellationCause["OWNER_ACTION"] = "OWNER_ACTION";
    /** Order was canceled by member (default if canceled by member identity) */
    CancellationCause["MEMBER_ACTION"] = "MEMBER_ACTION";
    /** Order was canceled because of payment failure */
    CancellationCause["PAYMENT_FAILURE"] = "PAYMENT_FAILURE";
    /** Order was canceled because of payment setup failure */
    CancellationCause["PAYMENT_SETUP_FAILURE"] = "PAYMENT_SETUP_FAILURE";
    /** Order was cancelled because of an unknown reason. It's not possible to know with certain payment providers (e.g. paypal) */
    CancellationCause["UNKNOWN"] = "UNKNOWN";
})(CancellationCause || (CancellationCause = {}));
export var CancellationEffectiveAt;
(function (CancellationEffectiveAt) {
    /** Cancellation time undefined */
    CancellationEffectiveAt["UNDEFINED"] = "UNDEFINED";
    /** Will cancel the order now, i.e. update validUntil to the current date */
    CancellationEffectiveAt["IMMEDIATELY"] = "IMMEDIATELY";
    /** Will cancel the order at the date when next payment should have been made */
    CancellationEffectiveAt["NEXT_PAYMENT_DATE"] = "NEXT_PAYMENT_DATE";
})(CancellationEffectiveAt || (CancellationEffectiveAt = {}));
export var PaymentStatus;
(function (PaymentStatus) {
    /** Payment status undefined */
    PaymentStatus["UNDEFINED"] = "UNDEFINED";
    /** Payment has been paid */
    PaymentStatus["PAID"] = "PAID";
    /** Payment has been refunded */
    PaymentStatus["REFUNDED"] = "REFUNDED";
    /** Recurring payment has failed */
    PaymentStatus["FAILED"] = "FAILED";
    /** Payment has not been paid */
    PaymentStatus["UNPAID"] = "UNPAID";
    /** Billing has been initialized, but actual charge is yet to be made. Can happen for free trial and PayPal */
    PaymentStatus["PENDING"] = "PENDING";
    /** Used in cases where the plan is free */
    PaymentStatus["NOT_APPLICABLE"] = "NOT_APPLICABLE";
})(PaymentStatus || (PaymentStatus = {}));
export var Status;
(function (Status) {
    Status["UNDEFINED"] = "UNDEFINED";
    /** Order suspension is active */
    Status["ACTIVE"] = "ACTIVE";
    /** Order suspension has ended */
    Status["ENDED"] = "ENDED";
})(Status || (Status = {}));
export var Set;
(function (Set) {
    /** Same behavior as BASIC */
    Set["UNKNOWN_SET"] = "UNKNOWN_SET";
    /**
     * Returns fields of the entity that are available in the database.
     * By default a field is available in the database unless explicitly specified in the documentation
     */
    Set["BASIC"] = "BASIC";
    /**
     * Returns all fields in the entity.
     * This might make additional calls to gather the full entity
     */
    Set["FULL"] = "FULL";
})(Set || (Set = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
export var ReasonNotSuspendable;
(function (ReasonNotSuspendable) {
    /** Reason unknown */
    ReasonNotSuspendable["UNDEFINED"] = "UNDEFINED";
    /** Saved in the database but is awaiting payment. Non-active orders cannot be suspended */
    ReasonNotSuspendable["PENDING"] = "PENDING";
    /** Trial orders cannot be suspended */
    ReasonNotSuspendable["TRIAL"] = "TRIAL";
    /** Canceled orders cannot be suspended */
    ReasonNotSuspendable["CANCELED"] = "CANCELED";
    /** Ended orders cannot be suspended */
    ReasonNotSuspendable["ENDED"] = "ENDED";
    /** Paid for orders with future start dates cannot be suspended */
    ReasonNotSuspendable["NOT_STARTED"] = "NOT_STARTED";
    /** Order is already suspended */
    ReasonNotSuspendable["ALREADY_SUSPENDED"] = "ALREADY_SUSPENDED";
    /** Orders based on recurring payments using older Stripe versions cannot be suspended */
    ReasonNotSuspendable["OLD_STRIPE"] = "OLD_STRIPE";
})(ReasonNotSuspendable || (ReasonNotSuspendable = {}));
//# sourceMappingURL=pricing-plans-v2-order-orders.types.js.map