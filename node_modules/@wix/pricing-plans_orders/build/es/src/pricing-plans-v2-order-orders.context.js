import { memberGetOrder as publicMemberGetOrder, memberListOrders as publicMemberListOrders, requestCancellation as publicRequestCancellation, createOfflineOrder as publicCreateOfflineOrder, getOfflineOrderPreview as publicGetOfflineOrderPreview, getPricePreview as publicGetPricePreview, managementGetOrder as publicManagementGetOrder, managementListOrders as publicManagementListOrders, postponeEndDate as publicPostponeEndDate, cancelOrder as publicCancelOrder, markAsPaid as publicMarkAsPaid, pauseOrder as publicPauseOrder, resumeOrder as publicResumeOrder, } from './pricing-plans-v2-order-orders.public';
import { createRESTModule } from '@wix/sdk-runtime/rest-modules';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';
import { onOrderCanceled as publicOnOrderCanceled } from './pricing-plans-v2-order-orders.public';
import { onOrderCreated as publicOnOrderCreated } from './pricing-plans-v2-order-orders.public';
import { onOrderUpdated as publicOnOrderUpdated } from './pricing-plans-v2-order-orders.public';
import { onOrderStartDateChanged as publicOnOrderStartDateChanged } from './pricing-plans-v2-order-orders.public';
import { onOrderPurchased as publicOnOrderPurchased } from './pricing-plans-v2-order-orders.public';
import { onOrderStarted as publicOnOrderStarted } from './pricing-plans-v2-order-orders.public';
import { onOrderCycleStarted as publicOnOrderCycleStarted } from './pricing-plans-v2-order-orders.public';
import { onOrderAutoRenewCanceled as publicOnOrderAutoRenewCanceled } from './pricing-plans-v2-order-orders.public';
import { onOrderEnded as publicOnOrderEnded } from './pricing-plans-v2-order-orders.public';
import { onOrderEndDatePostponed as publicOnOrderEndDatePostponed } from './pricing-plans-v2-order-orders.public';
import { onOrderMarkedAsPaid as publicOnOrderMarkedAsPaid } from './pricing-plans-v2-order-orders.public';
import { onOrderPaused as publicOnOrderPaused } from './pricing-plans-v2-order-orders.public';
import { onOrderResumed as publicOnOrderResumed } from './pricing-plans-v2-order-orders.public';
export const memberGetOrder = createRESTModule(publicMemberGetOrder);
export const memberListOrders = createRESTModule(publicMemberListOrders);
export const requestCancellation = createRESTModule(publicRequestCancellation);
export const createOfflineOrder = createRESTModule(publicCreateOfflineOrder);
export const getOfflineOrderPreview = createRESTModule(publicGetOfflineOrderPreview);
export const getPricePreview = createRESTModule(publicGetPricePreview);
export const managementGetOrder = createRESTModule(publicManagementGetOrder);
export const managementListOrders = createRESTModule(publicManagementListOrders);
export const postponeEndDate = createRESTModule(publicPostponeEndDate);
export const cancelOrder = createRESTModule(publicCancelOrder);
export const markAsPaid = createRESTModule(publicMarkAsPaid);
export const pauseOrder = createRESTModule(publicPauseOrder);
export const resumeOrder = createRESTModule(publicResumeOrder);
export { publicOnOrderCanceled };
/**
 * Triggered when an order is canceled.
 *
 * This webhook is triggered either immediately or at the end of the current payment cycle, as follows:
 * + If the order is canceled and `effectiveAt` is set to `IMMEDIATELY`, the webhook is triggered immediately when canceled.
 * + If the order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`, the webhook is triggered at the end of the current payment cycle. In this case, the [Order Auto Renew Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-auto-renew-canceled-webhook) is triggered immediately.
 */
export const onOrderCanceled = createEventModule(publicOnOrderCanceled);
export { publicOnOrderCreated };
/**
 * Triggered when an order is created.
 */
export const onOrderCreated = createEventModule(publicOnOrderCreated);
export { publicOnOrderUpdated };
/**
 * Triggered when an order is updated.
 *
 * Order Updated Webhook is triggered when any of the following happens:
 * + Order is paid for. [Order Purchased Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-purchased-webhook) is also triggered.
 * + Order reaches its start date or end date. [Order Started Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-started-webhook) and [Order Ended Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-ended-webhook), respectively, are also triggered.
 * + New payment cycle of an order starts. [Order Cycle Started Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-cycle-started-webhook) is also triggered.
 * + Offline order is marked as paid. [Order Marked As Paid Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-marked-as-paid-webhook) is also triggered.
 * + End date of the order is postponed. [Order End Date Postponed Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-end-date-postponed-webhook) is also triggered
 * + Order is paused, or a paused order is resumed. [Order Paused Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-paused-webhook)
 * and [Order Resumed Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-resumed-webhook), respectively, are also triggered.
 * + Order is canceled, either immediately or at the end of the payment cycle. [Order Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook)
 * and [Order Auto Renew Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-auto-renew-canceled-webhook) are also triggered.
 */
export const onOrderUpdated = createEventModule(publicOnOrderUpdated);
export { publicOnOrderStartDateChanged };
/**
 * Triggered when an order's `startDate` is changed.
 */
export const onOrderStartDateChanged = createEventModule(publicOnOrderStartDateChanged);
export { publicOnOrderPurchased };
/**
 * Triggered when an order is purchased.
 *
 * This webhook is triggered for any of the following events:
 * + Order is paid in full.
 * + At least 1 order cycle payment is paid for.
 * + Offline order is created, even if not yet marked as paid.
 * + Free order is created.
 */
export const onOrderPurchased = createEventModule(publicOnOrderPurchased);
export { publicOnOrderStarted };
/**
 * Triggered when an order reaches its `startDate`. Applies to both purchased and free orders.
 */
export const onOrderStarted = createEventModule(publicOnOrderStarted);
export { publicOnOrderCycleStarted };
/**
 * Triggered at the start of a new payment cycle for an existing order.
 *
 * This webhook is not triggered at the initial start of an offline order.
 */
export const onOrderCycleStarted = createEventModule(publicOnOrderCycleStarted);
export { publicOnOrderAutoRenewCanceled };
/**
 * Triggered when an order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`.
 *
 * This webhook is *not* triggered in the following scenarios:
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`. Instead, at the time of cancellation, [Order Canceled](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook) is triggered.
 * + When an order expires at the end of the current payment cycle because it was canceled and `effectiveAt` was set to `NEXT_PAYMENT_DATE`. Instead, at the time of expiration, [Order Canceled](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook) and [Order Ended](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-ended-webhook) are triggered.
 */
export const onOrderAutoRenewCanceled = createEventModule(publicOnOrderAutoRenewCanceled);
export { publicOnOrderEnded };
/**
 * Triggered when an order ends.
 *
 * This webhook is triggered:
 * + When an order expires at the end of the current payment cycle.
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`..
 */
export const onOrderEnded = createEventModule(publicOnOrderEnded);
export { publicOnOrderEndDatePostponed };
/**
 * Triggered when an order's `endDate` is postponed.
 */
export const onOrderEndDatePostponed = createEventModule(publicOnOrderEndDatePostponed);
export { publicOnOrderMarkedAsPaid };
/**
 * Triggered when an offline order is marked as paid.
 */
export const onOrderMarkedAsPaid = createEventModule(publicOnOrderMarkedAsPaid);
export { publicOnOrderPaused };
/**
 * Triggered when an order is paused.
 */
export const onOrderPaused = createEventModule(publicOnOrderPaused);
export { publicOnOrderResumed };
/**
 * Triggered when a paused order is resumed.
 */
export const onOrderResumed = createEventModule(publicOnOrderResumed);
export { PeriodUnit, OrderType, OrderMethod, OrderStatus, CancellationCause, CancellationEffectiveAt, PaymentStatus, Status, Set, SortOrder, WebhookIdentityType, ReasonNotSuspendable, } from './pricing-plans-v2-order-orders.universal';
//# sourceMappingURL=pricing-plans-v2-order-orders.context.js.map