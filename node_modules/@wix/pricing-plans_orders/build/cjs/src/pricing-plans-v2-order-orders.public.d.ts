import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { CancellationEffectiveAt, CreateOfflineOrderOptions, CreateOfflineOrderResponse, CreateOfflineOrderResponseNonNullableFields, GetOfflineOrderPreviewOptions, GetOfflineOrderPreviewResponse, GetOfflineOrderPreviewResponseNonNullableFields, GetOrderResponse, GetOrderResponseNonNullableFields, GetPricePreviewOptions, GetPricePreviewResponse, GetPricePreviewResponseNonNullableFields, ListOrdersResponse, ListOrdersResponseNonNullableFields, ManagementGetOrderOptions, ManagementListOrdersOptions, MemberGetOrderOptions, MemberListOrdersOptions, MemberListOrdersResponse, MemberListOrdersResponseNonNullableFields, Order, OrderAutoRenewCanceledEnvelope, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderCycleStartedEnvelope, OrderEndDatePostponedEnvelope, OrderEndedEnvelope, OrderMarkedAsPaidEnvelope, OrderNonNullableFields, OrderPausedEnvelope, OrderPurchasedEnvelope, OrderResumedEnvelope, OrderStartDateChangedEnvelope, OrderStartedEnvelope, OrderUpdatedEnvelope } from './pricing-plans-v2-order-orders.universal';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function memberGetOrder(httpClient: HttpClient): MemberGetOrderSignature;
interface MemberGetOrderSignature {
    /**
     * Gets an order by ID for the currently logged-in member.
     *
     * The `memberGetOrder()` function returns a Promise that resolves to information about a specified order for the currently logged-in member.
     * @param - Order ID.
     * @param - Options for getting a logged-in member's order.
     * @returns Requested order.
     */
    (_id: string, options?: MemberGetOrderOptions | undefined): Promise<Order & OrderNonNullableFields>;
}
export declare function memberListOrders(httpClient: HttpClient): MemberListOrdersSignature;
interface MemberListOrdersSignature {
    /**
     * Lists orders for the currently logged-in member.
     *
     * The `memberListOrders()` function returns a Promise that resolves to a list of up to 100 pricing plan orders.
     * @param - Filtering, sorting, and pagination options.
     */
    (options?: MemberListOrdersOptions | undefined): Promise<MemberListOrdersResponse & MemberListOrdersResponseNonNullableFields>;
}
export declare function requestCancellation(httpClient: HttpClient): RequestCancellationSignature;
interface RequestCancellationSignature {
    /**
     * Starts the process of canceling an order.
     *
     *
     * The `requestCancellation()` function returns a Promise that resolves when the order cancellation is successfully requested.
     *
     * For orders with recurring payments, a cancellation can be set to occur either immediately or at the next payment date. For orders with one-time payments, a cancellation occurs immediately after the request is processed.
     *
     * Requesting an order cancellation starts the cancellation process. There may be some operations that continue to be processed before the status of the order is changed to `"CANCELED"`. For example, payments might need to be refunded before the order is fully canceled.
     *
     * #### Canceling during the free trial period.
     *
     * When a buyer cancels their order during the free trial period, the buyer's subscription expires at the end of the free trial period and they won't be billed. The buyer may continue using the benefits until the end of the free trial period.
     *
     * @param - Order ID.
     * @param - Whether to cancel the order immediately or at the next payment date.
     * One-time payment orders can only be canceled immediately.
     *
     * Supported values:
     * - `"IMMEDIATELY"`: Indicates that the order should be canceled immediately.
     * - `"NEXT_PAYMENT_DATE"`: Indicates that the order be canceled at the next payment date.
     * @param - Options for requesting a cancellation.
     * @returns Fulfilled - When the cancellation process is started.
     */
    (_id: string, effectiveAt: CancellationEffectiveAt): Promise<void>;
}
export declare function createOfflineOrder(httpClient: HttpClient): CreateOfflineOrderSignature;
interface CreateOfflineOrderSignature {
    /**
     * Creates an order for a buyer who purchased the plan with an offline transaction.
     *
     * The `createOfflineOrder()` function returns a Promise that resolves to an `order` object when the order has been created.
     *
     * Payment of an offline order is handled in 1 of 2 ways.
     * - When creating the order, select `true` in the `paid` request parameter.
     * - After creation, with the [`markAsPaid()`](#markaspaid) function.
     *
     * When creating a non-free offline order:
     * - The order's status is set to `"PENDING"` if the start date is in the future. Otherwise, the status is set to `"ACTIVE"`.
     * The order's last payment status is set to `"UNPAID"` or `"PAID"`.
     *
     * When creating a free offline order:
     * - The order's status is set to `"PENDING"` if the start date is in the future. Otherwise, the status is set to `"ACTIVE"`.
     * - The order's last payment status is set to `"NOT_APPLICABLE"`.
     * @param - ID of the member ordering the plan.
     * @param - Options for creating an offline order.
     * @param - ID of the plan being ordered. See [Plans for more information about plan IDs](plans)
     * @returns Fulfilled - The order of the plan.
     */
    (planId: string, memberId: string, options?: CreateOfflineOrderOptions | undefined): Promise<CreateOfflineOrderResponse & CreateOfflineOrderResponseNonNullableFields>;
}
export declare function getOfflineOrderPreview(httpClient: HttpClient): GetOfflineOrderPreviewSignature;
interface GetOfflineOrderPreviewSignature {
    /**
     * Provides a preview of an offline order as if it was purchased.
     *
     * The `getOfflineOrderPreview()` function returns a Promise that resolves to a temporary preview of the offline order.
     *
     * The preview uses the same logic as purchasing a plan, but the preview is not saved. Because an order is not actually created, the preview's `_id` and `subscriptionId` properties are displayed as a string of multiple zero characters (`000000-0000`).
     *
     * If [taxes are configured](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection) for the site, taxes are applied to the preview. If not, `tax` previews as `null`.
     *
     * You can preview the order to check purchase limitations, but the limitations are not enforced for the preview. If a pricing plan has a limit on the amount of purchases per buyer, that limit is not considered for generating the preview. But, if that limit has been reached and this order would then exceed the amount of purchases permitted for this buyer, then `purchaseLimitExceeded` will return as `true`. Thus function is not available to the buyer. You specify the member ID for the buyer whose order should be previewed. To get a general price preview for a plan that's not buyer-specific, use the [`getPricePreview()`](#getpricepreview) function.
     * @param - Member ID of the buyer the previewed order is for.
     * @param - Options for previewing the offline order.
     * @param - ID of the plan of the previewed order.
     * @returns Fulfilled - A preview of the order.
     */
    (planId: string, memberId: string, options?: GetOfflineOrderPreviewOptions | undefined): Promise<GetOfflineOrderPreviewResponse & GetOfflineOrderPreviewResponseNonNullableFields>;
}
export declare function getPricePreview(httpClient: HttpClient): GetPricePreviewSignature;
interface GetPricePreviewSignature {
    /**
     * Retrieves a preview of an order's pricing as if it was purchased.
     *
     * The `getPricePreview()` function returns a Promise that resolves to a temporary preview of the order's price.
     *
     * The price preview uses the same logic for calculating prices as used when purchasing a plan, but the preview is not saved. If [taxes are configured](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection) for the site, taxes are applied to the preview. If not, the `tax` previews as `null`.
     *
     * Buyers do not have to be logged in to preview the price, as such, the details returned by this function are not buyer-specific. To generate a preview of a purchase for a specific-buyer, use the [`getOfflineOrderPreview()`](#getofflineorderpreview).
     * @param - ID of plan to preview.
     * @param - Options for getting a price preview.
     * @returns Fulfilled - A preview of the pricing for the order.
     */
    (planId: string, options?: GetPricePreviewOptions | undefined): Promise<GetPricePreviewResponse & GetPricePreviewResponseNonNullableFields>;
}
export declare function managementGetOrder(httpClient: HttpClient): ManagementGetOrderSignature;
interface ManagementGetOrderSignature {
    /**
     * Retrieves an order by ID.
     *
     * The `managementGetOrder()` function returns a Promise that resolves to information about the specified order.
     * @param - Order ID.
     * @param - Options to use when getting an order.
     */
    (_id: string, options?: ManagementGetOrderOptions | undefined): Promise<GetOrderResponse & GetOrderResponseNonNullableFields>;
}
export declare function managementListOrders(httpClient: HttpClient): ManagementListOrdersSignature;
interface ManagementListOrdersSignature {
    /**
     * Lists pricing plan orders.
     *
     * The `managementListOrders()` function returns a Promise that resolves to a list of up to 50 pricing plan orders. You can specify options for filtering, sorting, and paginating the results.
     *
     * This function returns the orders on the site. To list orders for the currently logged-in member, use [`memberListOrders()`](#memberlistorders).
     * @param - Filtering, sorting, and pagination options.
     */
    (options?: ManagementListOrdersOptions | undefined): Promise<ListOrdersResponse & ListOrdersResponseNonNullableFields>;
}
export declare function postponeEndDate(httpClient: HttpClient): PostponeEndDateSignature;
interface PostponeEndDateSignature {
    /**
     * Extends the duration of a pricing plan order by postponing the order's `endDate`.
     *
     * The `postponeEndDate()` function returns a Promise that resolves when the order's end date is successfully changed.
     *
     * The new end date and time must be later than the order's current `endDate`.
     *
     * Postponing the end date of an order does not impact payments. For example, if the pricing plan is for a membership to an online lecture series, and you want to extend the duration of the series because the lecturer could not attend some sessions, you can postpone the end date of the orders for all relevant participants. The participants will not be billed additionally.
     *
     * Postponing an order causes the following changes:
     * - The `endDate` for the order is adjusted to the new end date.
     * @param - Order ID.
     * @param - New end date and time.
     *
     * Must be later than the current end date and time.
     * @param - Options for postponing the end date of an order.
     * @returns Fulfilled - When the order's end date has been postponed or made earlier.
     */
    (_id: string, endDate: Date): Promise<void>;
}
export declare function cancelOrder(httpClient: HttpClient): CancelOrderSignature;
interface CancelOrderSignature {
    /**
     * Cancels an existing order.
     *
     * The `cancelOrder()` function returns a Promise that resolves when the order is successfully canceled.
     *
     * For orders with recurring payments, a cancellation can be set to occur either `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`.
     * For orders with one-time payments, a cancellation occurs `IMMEDIATELY`.
     *
     * Canceling an order changes the order status to `CANCELED`.
     *
     * #### Canceling during the free trial period.
     *
     * When a site owner cancels an ordered plan during the free trial period, they choose to apply the cancellation `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`.
     *
     * Canceling `IMMEDIATELY` will end the subscription for the buyer
     * immediately, even during the free trial period and the buyer won't be billed.
     *
     * Canceling at the `NEXT_PAYMENT_DATE` allows the buyer to continue using the benefits of the subscription until the end of the free trial period. Then, the subscription ends and the buyer is not billed.
     * @param - Order ID.
     * @param - When the order is canceled.
     *
     * One time orders can only be canceled immediately. Supported values:
     * - `"IMMEDIATELY"`: The order is canceled immediately.
     * - `"NEXT_PAYMENT_DATE"`: The order is canceled at the next payment date.
     * @param - Options for canceling orders.
     * @returns Fulfilled - When the order is canceled.
     */
    (_id: string, effectiveAt: CancellationEffectiveAt): Promise<void>;
}
export declare function markAsPaid(httpClient: HttpClient): MarkAsPaidSignature;
interface MarkAsPaidSignature {
    /**
     * Marks an offline order as paid.
     *
     * The `markAsPaid()` function returns a Promise that resolves when the offline order is successfully marked as paid.
     *
     * The entire order is marked as paid, even if the order's payments are recurring.
     *
     * >**Note:** Marking separate payment cycles as paid is not yet supported. Subsequent offline payments do trigger events and emails, but are not registered as additional offline payments.
     *
     * Marking an offline order as paid causes the following changes:
     * - The order's `lastPaymentStatus` changes to `"PAID"`.
     * - The order's status changes to either `"PENDING"` or `"ACTIVE"`, depending on the order's `startDate`.
     *
     * An error occurs if you attempt to:
     * - Mark an already-paid, offline order as paid. You cannot make an offline order as paid twice.
     * - Mark an online order as paid. The `markAsPaid()` function is supported for offline orders only.
     * @param - Order ID.
     * @returns Fulfilled - When the order is marked as paid.
     */
    (_id: string): Promise<void>;
}
export declare function pauseOrder(httpClient: HttpClient): PauseOrderSignature;
interface PauseOrderSignature {
    /**
     * Pauses a pricing plan order.
     *
     * The `pauseOrder()` function returns a Promise that resolves when the order is successfully paused.
     *
     * For orders with recurring payments, `pauseOrder()` also pauses the payment schedule. Buyers are not charged when an order is paused. Use `pauseOrder()`, for example, if the buyer is away and would like to put their pricing plan membership on hold until they return. Pausing an order affects the end date of the order by adding the time the order is paused to the `endDate`. You can only pause orders with an `"ACTIVE`" status.
     *
     * Pausing an order causes the following changes:
     * - The order status changes to `"PAUSED"`.
     * - The `pausePeriods` array is updated.
     *
     * The `endDate` and the `earliestEndDate` for the order are adjusted to include the pause period when the order is resumed.
     *
     * Paused orders can be continued with the [`resumeOrder()`](#resumeorder) function.
     * @param - Order ID.
     * @returns Fulfilled - When the order is paused.
     */
    (_id: string): Promise<void>;
}
export declare function resumeOrder(httpClient: HttpClient): ResumeOrderSignature;
interface ResumeOrderSignature {
    /**
     * Resumes a paused pricing plan order.
     *
     * The `resumeOrder()` function returns a Promise that resolves when a paused order is successfully resumed.
     *
     * For orders with recurring payments, `resumeOrder()` also restarts the payment schedule.
     *
     * Resuming an order causes the following changes:
     * - The order status changes to `"ACTIVE"`.
     * - The `pausePeriods` array is updated.
     * - The `endDate` for the order is adjusted to include the pause period.
     * - The `earliestEndDate` is adjusted to include the pause period. (This property is reserved for future use).
     * @param - Order ID.
     * @returns Fulfilled - When the order is resumed.
     */
    (_id: string): Promise<void>;
}
export declare const onOrderCanceled: EventDefinition<OrderCanceledEnvelope, "wix.pricing_plans.v2.order_canceled">;
export declare const onOrderCreated: EventDefinition<OrderCreatedEnvelope, "wix.pricing_plans.v2.order_created">;
export declare const onOrderUpdated: EventDefinition<OrderUpdatedEnvelope, "wix.pricing_plans.v2.order_updated">;
export declare const onOrderStartDateChanged: EventDefinition<OrderStartDateChangedEnvelope, "wix.pricing_plans.v2.order_start_date_changed">;
export declare const onOrderPurchased: EventDefinition<OrderPurchasedEnvelope, "wix.pricing_plans.v2.order_purchased">;
export declare const onOrderStarted: EventDefinition<OrderStartedEnvelope, "wix.pricing_plans.v2.order_started">;
export declare const onOrderCycleStarted: EventDefinition<OrderCycleStartedEnvelope, "wix.pricing_plans.v2.order_cycle_started">;
export declare const onOrderAutoRenewCanceled: EventDefinition<OrderAutoRenewCanceledEnvelope, "wix.pricing_plans.v2.order_auto_renew_canceled">;
export declare const onOrderEnded: EventDefinition<OrderEndedEnvelope, "wix.pricing_plans.v2.order_ended">;
export declare const onOrderEndDatePostponed: EventDefinition<OrderEndDatePostponedEnvelope, "wix.pricing_plans.v2.order_end_date_postponed">;
export declare const onOrderMarkedAsPaid: EventDefinition<OrderMarkedAsPaidEnvelope, "wix.pricing_plans.v2.order_marked_as_paid">;
export declare const onOrderPaused: EventDefinition<OrderPausedEnvelope, "wix.pricing_plans.v2.order_paused">;
export declare const onOrderResumed: EventDefinition<OrderResumedEnvelope, "wix.pricing_plans.v2.order_resumed">;
export { ActionEvent, ApplicationError, ApplyCouponRequest, ApplyCouponResponse, BaseEventMetadata, BulkActionMetadata, BulkOrderResult, BulkPauseOrderRequest, BulkPauseOrderResponse, BulkResumeOrderRequest, BulkResumeOrderResponse, Buyer, CancelOrderRequest, CancelOrderResponse, Cancellation, CancellationCause, CancellationEffectiveAt, Captcha, ChangeStartDateRequest, ChangeStartDateResponse, Coupon, CouponsError, CreateExternalOrderRequest, CreateExternalOrderResponse, CreateGuestOnlineOrderRequest, CreateGuestOnlineOrderResponse, CreateOfflineOrderOptions, CreateOfflineOrderRequest, CreateOfflineOrderResponse, CreateOfflineOrderResponseNonNullableFields, CreateOnlineOrderRequest, CreateOnlineOrderResponse, CurrentCycle, CursorPaging, Cursors, DomainEvent, DomainEventBodyOneOf, Duration, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, Fee, FormData, GetAvailableOrderActionsRequest, GetAvailableOrderActionsResponse, GetGuestOnlineOrderPreviewRequest, GetGuestOnlineOrderPreviewResponse, GetOfflineOrderPreviewOptions, GetOfflineOrderPreviewRequest, GetOfflineOrderPreviewResponse, GetOfflineOrderPreviewResponseNonNullableFields, GetOnlineOrderPreviewRequest, GetOnlineOrderPreviewResponse, GetOrderRequest, GetOrderResponse, GetOrderResponseNonNullableFields, GetOrdersStatsRequest, GetOrdersStatsResponse, GetPricePreviewOptions, GetPricePreviewRequest, GetPricePreviewResponse, GetPricePreviewResponseNonNullableFields, Guest, IdentificationData, IdentificationDataIdOneOf, ItemMetadata, ListOrdersRequest, ListOrdersResponse, ListOrdersResponseNonNullableFields, ManagementGetOrderOptions, ManagementListOrdersOptions, MarkAsPaidRequest, MarkAsPaidResponse, MemberGetOrderOptions, MemberGetOrderRequest, MemberGetOrderResponse, MemberGetOrderResponseNonNullableFields, MemberListOrdersOptions, MemberListOrdersRequest, MemberListOrdersResponse, MemberListOrdersResponseNonNullableFields, MessageEnvelope, OnBehalf, Order, OrderAutoRenewCanceled, OrderAutoRenewCanceledEnvelope, OrderCanceled, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderCycle, OrderCycleStarted, OrderCycleStartedEnvelope, OrderEndDatePostponed, OrderEndDatePostponedEnvelope, OrderEnded, OrderEndedEnvelope, OrderMarkedAsPaid, OrderMarkedAsPaidEnvelope, OrderMethod, OrderNonNullableFields, OrderPaused, OrderPausedEnvelope, OrderPurchased, OrderPurchasedEnvelope, OrderResumed, OrderResumedEnvelope, OrderStartDateChanged, OrderStartDateChangedEnvelope, OrderStarted, OrderStartedEnvelope, OrderStatus, OrderType, OrderUpdatedEnvelope, OrdersQueryOrdersRequest, OrdersQueryOrdersResponse, Paging, PagingMetadataV2, PauseOrderRequest, PauseOrderResponse, PausePeriod, PaymentStatus, PeriodUnit, PostponeEndDateRequest, PostponeEndDateResponse, Price, PriceDetails, PriceDetailsPricingModelOneOf, PriceDuration, PricingDetails, PricingDetailsPricingModelOneOf, QueryOrdersRequest, QueryOrdersResponse, QueryV2, QueryV2PagingMethodOneOf, ReasonNotSuspendable, Recurrence, RequestCancellationRequest, RequestCancellationResponse, RestoreInfo, ResumeOrderRequest, ResumeOrderResponse, Set, SetSubmissionRequest, SetSubmissionResponse, SortOrder, Sorting, SpannedPrice, Status, Tax, WebhookIdentityType, } from './pricing-plans-v2-order-orders.universal';
