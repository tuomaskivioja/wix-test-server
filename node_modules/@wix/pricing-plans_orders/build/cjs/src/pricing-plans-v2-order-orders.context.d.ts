import { memberGetOrder as publicMemberGetOrder, memberListOrders as publicMemberListOrders, requestCancellation as publicRequestCancellation, createOfflineOrder as publicCreateOfflineOrder, getOfflineOrderPreview as publicGetOfflineOrderPreview, getPricePreview as publicGetPricePreview, managementGetOrder as publicManagementGetOrder, managementListOrders as publicManagementListOrders, postponeEndDate as publicPostponeEndDate, cancelOrder as publicCancelOrder, markAsPaid as publicMarkAsPaid, pauseOrder as publicPauseOrder, resumeOrder as publicResumeOrder } from './pricing-plans-v2-order-orders.public';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';
import { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';
import { onOrderCanceled as publicOnOrderCanceled } from './pricing-plans-v2-order-orders.public';
import { onOrderCreated as publicOnOrderCreated } from './pricing-plans-v2-order-orders.public';
import { onOrderUpdated as publicOnOrderUpdated } from './pricing-plans-v2-order-orders.public';
import { onOrderStartDateChanged as publicOnOrderStartDateChanged } from './pricing-plans-v2-order-orders.public';
import { onOrderPurchased as publicOnOrderPurchased } from './pricing-plans-v2-order-orders.public';
import { onOrderStarted as publicOnOrderStarted } from './pricing-plans-v2-order-orders.public';
import { onOrderCycleStarted as publicOnOrderCycleStarted } from './pricing-plans-v2-order-orders.public';
import { onOrderAutoRenewCanceled as publicOnOrderAutoRenewCanceled } from './pricing-plans-v2-order-orders.public';
import { onOrderEnded as publicOnOrderEnded } from './pricing-plans-v2-order-orders.public';
import { onOrderEndDatePostponed as publicOnOrderEndDatePostponed } from './pricing-plans-v2-order-orders.public';
import { onOrderMarkedAsPaid as publicOnOrderMarkedAsPaid } from './pricing-plans-v2-order-orders.public';
import { onOrderPaused as publicOnOrderPaused } from './pricing-plans-v2-order-orders.public';
import { onOrderResumed as publicOnOrderResumed } from './pricing-plans-v2-order-orders.public';
export declare const memberGetOrder: MaybeContext<BuildRESTFunction<typeof publicMemberGetOrder> & typeof publicMemberGetOrder>;
export declare const memberListOrders: MaybeContext<BuildRESTFunction<typeof publicMemberListOrders> & typeof publicMemberListOrders>;
export declare const requestCancellation: MaybeContext<BuildRESTFunction<typeof publicRequestCancellation> & typeof publicRequestCancellation>;
export declare const createOfflineOrder: MaybeContext<BuildRESTFunction<typeof publicCreateOfflineOrder> & typeof publicCreateOfflineOrder>;
export declare const getOfflineOrderPreview: MaybeContext<BuildRESTFunction<typeof publicGetOfflineOrderPreview> & typeof publicGetOfflineOrderPreview>;
export declare const getPricePreview: MaybeContext<BuildRESTFunction<typeof publicGetPricePreview> & typeof publicGetPricePreview>;
export declare const managementGetOrder: MaybeContext<BuildRESTFunction<typeof publicManagementGetOrder> & typeof publicManagementGetOrder>;
export declare const managementListOrders: MaybeContext<BuildRESTFunction<typeof publicManagementListOrders> & typeof publicManagementListOrders>;
export declare const postponeEndDate: MaybeContext<BuildRESTFunction<typeof publicPostponeEndDate> & typeof publicPostponeEndDate>;
export declare const cancelOrder: MaybeContext<BuildRESTFunction<typeof publicCancelOrder> & typeof publicCancelOrder>;
export declare const markAsPaid: MaybeContext<BuildRESTFunction<typeof publicMarkAsPaid> & typeof publicMarkAsPaid>;
export declare const pauseOrder: MaybeContext<BuildRESTFunction<typeof publicPauseOrder> & typeof publicPauseOrder>;
export declare const resumeOrder: MaybeContext<BuildRESTFunction<typeof publicResumeOrder> & typeof publicResumeOrder>;
export { publicOnOrderCanceled };
export type _publicOnOrderCanceledType = typeof publicOnOrderCanceled;
/**
 * Triggered when an order is canceled.
 *
 * This webhook is triggered either immediately or at the end of the current payment cycle, as follows:
 * + If the order is canceled and `effectiveAt` is set to `IMMEDIATELY`, the webhook is triggered immediately when canceled.
 * + If the order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`, the webhook is triggered at the end of the current payment cycle. In this case, the [Order Auto Renew Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-auto-renew-canceled-webhook) is triggered immediately.
 */
export declare const onOrderCanceled: ReturnType<typeof createEventModule<_publicOnOrderCanceledType>>;
export { publicOnOrderCreated };
export type _publicOnOrderCreatedType = typeof publicOnOrderCreated;
/**
 * Triggered when an order is created.
 */
export declare const onOrderCreated: ReturnType<typeof createEventModule<_publicOnOrderCreatedType>>;
export { publicOnOrderUpdated };
export type _publicOnOrderUpdatedType = typeof publicOnOrderUpdated;
/**
 * Triggered when an order is updated.
 *
 * Order Updated Webhook is triggered when any of the following happens:
 * + Order is paid for. [Order Purchased Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-purchased-webhook) is also triggered.
 * + Order reaches its start date or end date. [Order Started Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-started-webhook) and [Order Ended Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-ended-webhook), respectively, are also triggered.
 * + New payment cycle of an order starts. [Order Cycle Started Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-cycle-started-webhook) is also triggered.
 * + Offline order is marked as paid. [Order Marked As Paid Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-marked-as-paid-webhook) is also triggered.
 * + End date of the order is postponed. [Order End Date Postponed Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-end-date-postponed-webhook) is also triggered
 * + Order is paused, or a paused order is resumed. [Order Paused Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-paused-webhook)
 * and [Order Resumed Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-resumed-webhook), respectively, are also triggered.
 * + Order is canceled, either immediately or at the end of the payment cycle. [Order Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook)
 * and [Order Auto Renew Canceled Webhook](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-auto-renew-canceled-webhook) are also triggered.
 */
export declare const onOrderUpdated: ReturnType<typeof createEventModule<_publicOnOrderUpdatedType>>;
export { publicOnOrderStartDateChanged };
export type _publicOnOrderStartDateChangedType = typeof publicOnOrderStartDateChanged;
/**
 * Triggered when an order's `startDate` is changed.
 */
export declare const onOrderStartDateChanged: ReturnType<typeof createEventModule<_publicOnOrderStartDateChangedType>>;
export { publicOnOrderPurchased };
export type _publicOnOrderPurchasedType = typeof publicOnOrderPurchased;
/**
 * Triggered when an order is purchased.
 *
 * This webhook is triggered for any of the following events:
 * + Order is paid in full.
 * + At least 1 order cycle payment is paid for.
 * + Offline order is created, even if not yet marked as paid.
 * + Free order is created.
 */
export declare const onOrderPurchased: ReturnType<typeof createEventModule<_publicOnOrderPurchasedType>>;
export { publicOnOrderStarted };
export type _publicOnOrderStartedType = typeof publicOnOrderStarted;
/**
 * Triggered when an order reaches its `startDate`. Applies to both purchased and free orders.
 */
export declare const onOrderStarted: ReturnType<typeof createEventModule<_publicOnOrderStartedType>>;
export { publicOnOrderCycleStarted };
export type _publicOnOrderCycleStartedType = typeof publicOnOrderCycleStarted;
/**
 * Triggered at the start of a new payment cycle for an existing order.
 *
 * This webhook is not triggered at the initial start of an offline order.
 */
export declare const onOrderCycleStarted: ReturnType<typeof createEventModule<_publicOnOrderCycleStartedType>>;
export { publicOnOrderAutoRenewCanceled };
export type _publicOnOrderAutoRenewCanceledType = typeof publicOnOrderAutoRenewCanceled;
/**
 * Triggered when an order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`.
 *
 * This webhook is *not* triggered in the following scenarios:
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`. Instead, at the time of cancellation, [Order Canceled](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook) is triggered.
 * + When an order expires at the end of the current payment cycle because it was canceled and `effectiveAt` was set to `NEXT_PAYMENT_DATE`. Instead, at the time of expiration, [Order Canceled](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-canceled-webhook) and [Order Ended](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/orders/order-ended-webhook) are triggered.
 */
export declare const onOrderAutoRenewCanceled: ReturnType<typeof createEventModule<_publicOnOrderAutoRenewCanceledType>>;
export { publicOnOrderEnded };
export type _publicOnOrderEndedType = typeof publicOnOrderEnded;
/**
 * Triggered when an order ends.
 *
 * This webhook is triggered:
 * + When an order expires at the end of the current payment cycle.
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`..
 */
export declare const onOrderEnded: ReturnType<typeof createEventModule<_publicOnOrderEndedType>>;
export { publicOnOrderEndDatePostponed };
export type _publicOnOrderEndDatePostponedType = typeof publicOnOrderEndDatePostponed;
/**
 * Triggered when an order's `endDate` is postponed.
 */
export declare const onOrderEndDatePostponed: ReturnType<typeof createEventModule<_publicOnOrderEndDatePostponedType>>;
export { publicOnOrderMarkedAsPaid };
export type _publicOnOrderMarkedAsPaidType = typeof publicOnOrderMarkedAsPaid;
/**
 * Triggered when an offline order is marked as paid.
 */
export declare const onOrderMarkedAsPaid: ReturnType<typeof createEventModule<_publicOnOrderMarkedAsPaidType>>;
export { publicOnOrderPaused };
export type _publicOnOrderPausedType = typeof publicOnOrderPaused;
/**
 * Triggered when an order is paused.
 */
export declare const onOrderPaused: ReturnType<typeof createEventModule<_publicOnOrderPausedType>>;
export { publicOnOrderResumed };
export type _publicOnOrderResumedType = typeof publicOnOrderResumed;
/**
 * Triggered when a paused order is resumed.
 */
export declare const onOrderResumed: ReturnType<typeof createEventModule<_publicOnOrderResumedType>>;
export { PeriodUnit, OrderType, OrderMethod, OrderStatus, CancellationCause, CancellationEffectiveAt, PaymentStatus, Status, Set, SortOrder, WebhookIdentityType, ReasonNotSuspendable, } from './pricing-plans-v2-order-orders.universal';
export { Order, Buyer, PriceDetails, PriceDetailsPricingModelOneOf, Tax, Recurrence, Duration, Coupon, PricingDetails, PricingDetailsPricingModelOneOf, SpannedPrice, PriceDuration, Price, Fee, Cancellation, PausePeriod, CurrentCycle, OrderCycle, FormData, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, RestoreInfo, EntityUpdatedEvent, EntityDeletedEvent, ActionEvent, Empty, MemberGetOrderRequest, MemberGetOrderResponse, MemberListOrdersRequest, Sorting, MemberListOrdersResponse, PagingMetadataV2, Cursors, QueryOrdersRequest, QueryV2, QueryV2PagingMethodOneOf, Paging, CursorPaging, QueryOrdersResponse, RequestCancellationRequest, RequestCancellationResponse, OrderCanceled, MessageEnvelope, IdentificationData, IdentificationDataIdOneOf, CreateOnlineOrderRequest, OnBehalf, CreateOnlineOrderResponse, CouponsError, CreateGuestOnlineOrderRequest, Captcha, Guest, CreateGuestOnlineOrderResponse, CreateOfflineOrderRequest, CreateOfflineOrderResponse, CreateExternalOrderRequest, CreateExternalOrderResponse, GetOnlineOrderPreviewRequest, GetOnlineOrderPreviewResponse, GetGuestOnlineOrderPreviewRequest, GetGuestOnlineOrderPreviewResponse, GetOfflineOrderPreviewRequest, GetOfflineOrderPreviewResponse, GetPricePreviewRequest, GetPricePreviewResponse, ChangeStartDateRequest, ChangeStartDateResponse, OrderStartDateChanged, ApplyCouponRequest, ApplyCouponResponse, SetSubmissionRequest, SetSubmissionResponse, OrderPurchased, OrderStarted, OrderCycleStarted, OrderAutoRenewCanceled, OrderEnded, GetOrderRequest, GetOrderResponse, ListOrdersRequest, ListOrdersResponse, OrdersQueryOrdersRequest, OrdersQueryOrdersResponse, GetOrdersStatsRequest, GetOrdersStatsResponse, GetAvailableOrderActionsRequest, GetAvailableOrderActionsResponse, PostponeEndDateRequest, PostponeEndDateResponse, OrderEndDatePostponed, CancelOrderRequest, CancelOrderResponse, MarkAsPaidRequest, MarkAsPaidResponse, OrderMarkedAsPaid, PauseOrderRequest, PauseOrderResponse, OrderPaused, BulkPauseOrderRequest, BulkPauseOrderResponse, BulkOrderResult, ItemMetadata, ApplicationError, BulkActionMetadata, ResumeOrderRequest, ResumeOrderResponse, OrderResumed, BulkResumeOrderRequest, BulkResumeOrderResponse, OrderNonNullableFields, MemberGetOrderResponseNonNullableFields, MemberListOrdersResponseNonNullableFields, CreateOfflineOrderResponseNonNullableFields, GetOfflineOrderPreviewResponseNonNullableFields, GetPricePreviewResponseNonNullableFields, GetOrderResponseNonNullableFields, ListOrdersResponseNonNullableFields, BaseEventMetadata, EventMetadata, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderUpdatedEnvelope, OrderStartDateChangedEnvelope, OrderPurchasedEnvelope, OrderStartedEnvelope, OrderCycleStartedEnvelope, OrderAutoRenewCanceledEnvelope, OrderEndedEnvelope, OrderEndDatePostponedEnvelope, OrderMarkedAsPaidEnvelope, OrderPausedEnvelope, OrderResumedEnvelope, MemberGetOrderOptions, MemberListOrdersOptions, CreateOfflineOrderOptions, GetOfflineOrderPreviewOptions, GetPricePreviewOptions, ManagementGetOrderOptions, ManagementListOrdersOptions, } from './pricing-plans-v2-order-orders.universal';
