{"version":3,"names":["_typeUtils","require","_clone","_interopRequireDefault","_filterValidator","_queryOptimiser","filterMixin","Base","constructor","obj","_defineProperty2","default","filterTree","$and","invalidArguments","encoder","eq","args","_binaryAnd","ne","ge","_AndLogicalEquivalence","gt","le","lt","isNotEmpty","field","newInvalidArguments","valid","arityIsOne","arguments","validFieldName","validateAndAggregate","_copy","isEmpty","startsWith","_AndStringOperand","endsWith","contains","hasSome","_AndSetOperand","hasAll","or","orQuery","isInstanceOfSameClass","prefix","isEmptyAnd","inAnd","$or","concat","and","andQuery","not","notQuery","newFilterTree","clone","notClause","$not","resultingFilter","inAndOptimized","between","rangeStart","rangeEnd","arityIsThree","sameType","typeIsStringNumberOrDate","getFilterModel","length","Error","join","optimisedQuery","setFilterModel","filterModel","filterOperatorSymbol","operatorName","operand","Array","prototype","slice","call","arityIsTwo","_makeNewFilter","filterOperatorName","typeIsString","rawOperands","operands","isArray","arityIsAtLeastTwo","typeIsStringNumberOrDateForAll","serializableOperand","undefined","newFilter","_buildFilter","push","result","isEmptyObject","_encode","isFunction","FilterValidator","isConjunctiveFormFilter","Object","keys","reduce","aggr","val","node","_default","exports"],"sources":["../../src/filter-mixin.ts"],"sourcesContent":["import { isArray, isFunction } from './type-utils'\nimport clone from './clone'\nimport { FilterValidator } from './filter-validator'\nimport { Validator } from './validator'\nimport { optimisedQuery } from './query-optimiser'\n\nconst filterMixin = (Base: any = class {}) =>\n  class extends Base {\n    filterTree\n    invalidArguments\n    encoder\n\n    constructor(obj: { filterTree?; invalidArguments?; encoder? } = {}) {\n      super(obj)\n      this.filterTree = obj.filterTree || { $and: [] }\n      this.invalidArguments = obj.invalidArguments || []\n      this.encoder = obj.encoder || {}\n    }\n\n    eq(...args) {\n      return this._binaryAnd('$eq', '.eq', args)\n    }\n\n    ne(...args) {\n      return this._binaryAnd('$ne', '.ne', args)\n    }\n\n    ge(...args) {\n      return this._AndLogicalEquivalence('$gte', '.ge', args)\n    }\n\n    gt(...args) {\n      return this._AndLogicalEquivalence('$gt', '.gt', args)\n    }\n\n    le(...args) {\n      return this._AndLogicalEquivalence('$lte', '.le', args)\n    }\n\n    lt(...args) {\n      return this._AndLogicalEquivalence('$lt', '.lt', args)\n    }\n\n    isNotEmpty(field) {\n      const [newInvalidArguments, valid] = this._filterValidator('.isNotEmpty')\n        .arityIsOne(arguments)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.ne(field, null)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    isEmpty(field) {\n      const [newInvalidArguments, valid] = this._filterValidator('.isEmpty')\n        .arityIsOne(arguments)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.eq(field, null)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    startsWith(...args) {\n      return this._AndStringOperand('$startsWith', '.startsWith', args)\n    }\n\n    endsWith(...args) {\n      return this._AndStringOperand('$endsWith', '.endsWith', args)\n    }\n\n    contains(...args) {\n      return this._AndStringOperand('$contains', '.contains', args)\n    }\n\n    hasSome(...args) {\n      return this._AndSetOperand('$hasSome', '.hasSome', args)\n    }\n\n    hasAll(...args) {\n      return this._AndSetOperand('$hasAll', '.hasAll', args)\n    }\n\n    or(orQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.or')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(orQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const prefix = isEmptyAnd(this.filterTree) ? [] : [this.filterTree]\n        return this._copy(\n          inAnd({ $or: [...prefix, orQuery.filterTree] }),\n          newInvalidArguments.concat(orQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    and(andQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.and')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(andQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const prefix = isEmptyAnd(this.filterTree) ? [] : [this.filterTree]\n        return this._copy(\n          inAnd(...prefix, andQuery.filterTree),\n          newInvalidArguments.concat(andQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    not(notQuery) {\n      const [newInvalidArguments, valid] = this._filterValidator('.not')\n        .arityIsOne(arguments)\n        .isInstanceOfSameClass(notQuery)\n        .validateAndAggregate()\n\n      if (valid) {\n        const newFilterTree = clone(this.filterTree)\n        const notClause = { $not: [notQuery.filterTree] }\n        const resultingFilter = inAndOptimized(newFilterTree, notClause)\n\n        return this._copy(\n          resultingFilter,\n          newInvalidArguments.concat(notQuery.invalidArguments)\n        )\n      } else {\n        return this._copy(this.filterTree, newInvalidArguments)\n      }\n    }\n\n    between(field, rangeStart, rangeEnd) {\n      const [newInvalidArguments, valid] = this._filterValidator('.between')\n        .arityIsThree(arguments)\n        .sameType(rangeStart, rangeEnd)\n        .typeIsStringNumberOrDate(rangeStart)\n        .typeIsStringNumberOrDate(rangeEnd)\n        .validateAndAggregate()\n\n      if (valid) {\n        return this.ge(field, rangeStart).lt(field, rangeEnd)\n      }\n\n      return this._copy(this.filterTree, newInvalidArguments)\n    }\n\n    getFilterModel() {\n      if (this.invalidArguments.length > 0) {\n        throw new Error(this.invalidArguments.join(' '))\n      }\n      return optimisedQuery(this.filterTree)\n    }\n\n    setFilterModel(filterModel) {\n      return this._copy(filterModel, [])\n    }\n\n    _binaryAnd(filterOperatorSymbol, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorSymbol,\n        operand\n      )\n\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndLogicalEquivalence(filterOperatorSymbol, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .typeIsStringNumberOrDate(operand)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorSymbol,\n        operand\n      )\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndStringOperand(filterOperatorName, operatorName, args) {\n      const [field, operand] = Array.prototype.slice.call(args)\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsTwo(args)\n        .validFieldName(field)\n        .typeIsString(operand)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorName,\n        operand\n      )\n\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _AndSetOperand(filterOperatorName, operatorName, args) {\n      const [field, ...rawOperands] = Array.prototype.slice.call(args)\n      const operands = isArray(rawOperands[0]) ? rawOperands[0] : rawOperands\n\n      const [newInvalidArguments] = this._filterValidator(operatorName)\n        .arityIsAtLeastTwo(args)\n        .validFieldName(field)\n        .typeIsStringNumberOrDateForAll(operands)\n        .validateAndAggregate()\n\n      const newFilterTree = this._makeNewFilter(\n        field,\n        filterOperatorName,\n        operands\n      )\n      return this._copy(newFilterTree, newInvalidArguments)\n    }\n\n    _makeNewFilter(field, filterOperatorName, operand) {\n      const newFilterTree = clone(this.filterTree)\n\n      // filters with 'undefined' value are lost during serialization,\n      // e.g. { val: { $ne: undefined } | translates to { val: {} }\n      // Replacing 'undefined' with 'null' retains the filter.\n      const serializableOperand = operand === undefined ? null : operand\n      const newFilter = this._buildFilter(\n        field,\n        filterOperatorName,\n        serializableOperand\n      )\n\n      if (isArray(newFilterTree.$and)) {\n        newFilterTree.$and.push(newFilter)\n        return newFilterTree\n      } else {\n        const result = isEmptyObject(newFilterTree)\n          ? inAnd(newFilter)\n          : inAnd(newFilterTree, newFilter)\n        return result\n      }\n    }\n\n    _buildFilter(field, filterOperatorName, operand) {\n      if (filterOperatorName !== '$eq') {\n        const newFilter = {}\n        newFilter[field] = {}\n        newFilter[field][filterOperatorName] = this._encode(operand)\n        return newFilter\n      } else {\n        const newFilter = {}\n        newFilter[field] = this._encode(operand)\n        return newFilter\n      }\n    }\n\n    _encode(operand) {\n      if (isFunction(this.encoder)) {\n        return this.encoder(operand)\n      } else {\n        return operand\n      }\n    }\n\n    _copy(filterTree, invalidArguments) {\n      // @ts-ignore-next-line\n      return new this.constructor({ ...this, filterTree, invalidArguments })\n    }\n\n    _filterValidator(filterOperatorName): Validator {\n      return new FilterValidator(\n        filterOperatorName,\n        this.invalidArguments,\n        this.constructor\n      )\n    }\n  }\n\nfunction isConjunctiveFormFilter(filterTree) {\n  return isArray(filterTree.$and)\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0\n}\n\nfunction inAnd(...args) {\n  return {\n    $and: args,\n  }\n}\n\nfunction inAndOptimized(...args) {\n  return {\n    $and: args.reduce(\n      (aggr, val) =>\n        isConjunctiveFormFilter(val)\n          ? aggr.concat(val.$and)\n          : aggr.concat([val]),\n      []\n    ),\n  }\n}\n\nfunction isEmptyAnd(node) {\n  return node && node.$and && node.$and.length === 0\n}\n\nexport default filterMixin\n"],"mappings":"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"}