import { encode } from 'js-base64';

// Flatten a nested object to params object { field: { text: 'foo' } } => { field.text ='foo' }
function flattenParams(data: object, path = '') {
  const params: any = {};

  Object.entries(data).forEach(([key, value]) => {
    const isObject =
      value !== null && typeof value === 'object' && !Array.isArray(value);
    const fieldPath = resolvePath(path, key);

    if (isObject) {
      const serializedObject = flattenParams(value, fieldPath);
      Object.assign(params, serializedObject);
    } else {
      params[fieldPath] = value;
    }
  });

  return params;
}

function resolvePath(path: string, key: string) {
  return `${path}${path ? '.' : ''}${key}`;
}

export function toURLSearchParams(params: any, isComplexRequest?: boolean) {
  const flatten = flattenParams(params);

  const searchParams = Object.entries(flatten).reduce(
    (urlSearchParams, [key, value]) => {
      // inorder to make `foo: [1,2]` turn into `foo=1&foo=2` and not `foo[]=1&foo[]=2`
      const keyParams = Array.isArray(value) ? value : [value];

      keyParams.forEach((param: any) => {
        if (param === undefined || param === null) {
          return;
        }

        urlSearchParams.append(key, param);
      });

      return urlSearchParams;
    },
    new URLSearchParams(),
  );

  // https://github.com/wix-private/server-infra/tree/master/framework/grpc/rest#complex-requests-messages-with-get-mappings
  if (isComplexRequest) {
    searchParams.append('.r', encode(JSON.stringify(params), true));
  }

  return searchParams;
}
