import { isArray, isPlainObject } from 'lodash';
import { reduceTransformation, stripJsonPathRootPrefix, } from '@wix/motion-edm-autogen-transformations-core';
const QUERY_OPERATOR_PREFIX = '$';
var QuerySections;
(function (QuerySections) {
    QuerySections["FILTER"] = "filter";
    QuerySections["SORT"] = "sort";
    QuerySections["FIELDS"] = "fields";
})(QuerySections || (QuerySections = {}));
const CommonTransformations = {
    _id: `${QUERY_OPERATOR_PREFIX}.id`,
    _createdDate: `${QUERY_OPERATOR_PREFIX}.createdDate`,
    _updatedDate: `${QUERY_OPERATOR_PREFIX}.updatedDate`,
};
export function resolveQueryFieldsTransformationPaths(transformation) {
    return (reduceTransformation(transformation, {
        visitors: {
            NestedSimpleTransformationExpression(acc, path, value) {
                acc[path] = stripJsonPathRootPrefix(value);
            },
            MapArrayItems(acc, path, sourceArrayExpression) {
                acc[path] = stripJsonPathRootPrefix(sourceArrayExpression);
            },
        },
        accumulator: {},
    }) || {});
}
export function toPlatformizedQuery(query, transformations) {
    const allTransformations = {
        ...CommonTransformations,
        ...transformations,
    };
    const transformationPaths = resolveQueryFieldsTransformationPaths(allTransformations);
    return Object.entries(query).reduce((transformedQuery, [key, value]) => {
        if (key === QuerySections.FILTER) {
            transformedQuery[key] = value
                ? transformQueryFilter(value, transformationPaths)
                : undefined;
        }
        else if (key === QuerySections.SORT) {
            transformedQuery[key] = transformQuerySort(value, transformationPaths);
        }
        else if (key === QuerySections.FIELDS) {
            transformedQuery[key] = transformQueryFields(value, transformationPaths);
        }
        else {
            transformedQuery[key] = value;
        }
        return transformedQuery;
    }, {});
}
function transformQueryFilter(filter, transformationPaths) {
    return Object.entries(filter).reduce((transformedFilter, [filedOrOperator, value]) => {
        const key = filedOrOperator.startsWith(QUERY_OPERATOR_PREFIX)
            ? filedOrOperator
            : transformationPaths[filedOrOperator] || filedOrOperator;
        if (isPlainObject(value)) {
            transformedFilter[key] = transformQueryFilter(value, transformationPaths);
        }
        else if (isArray(value)) {
            transformedFilter[key] = value.map((x) => isPlainObject(x) ? transformQueryFilter(x, transformationPaths) : x);
        }
        else {
            transformedFilter[key] = value;
        }
        return transformedFilter;
    }, {});
}
function transformQuerySort(sort, transformationPaths) {
    return sort.map(({ fieldName, order }) => ({
        fieldName: transformationPaths[fieldName] || fieldName,
        ...(order ? { order } : {}),
    }));
}
function transformQueryFields(fields, transformationPaths) {
    return fields.map((field) => transformationPaths[field] || field);
}
//# sourceMappingURL=query-transformation.js.map