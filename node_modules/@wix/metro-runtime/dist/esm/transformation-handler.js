import { cloneDeep, set } from 'lodash';
import { parseLeanSchemaRef } from './serialization';
import { transformError as cloudEdmTransformError, transformResponseMessage, } from '@wix/motion-edm-autogen-transformations';
import { builtinCustomFunctions } from '@wix/motion-edm-autogen-p13n';
export const RootPath = Symbol('RootPath');
export var FqdnDirection;
(function (FqdnDirection) {
    FqdnDirection[FqdnDirection["TO_VELO"] = 0] = "TO_VELO";
    FqdnDirection[FqdnDirection["FROM_VELO"] = 1] = "FROM_VELO";
})(FqdnDirection || (FqdnDirection = {}));
export function transformFqdn(payload, fqdnTransformation) {
    const { transformation } = fqdnTransformation;
    return fqdnTransformation.paths.reduce((payload, path) => {
        const pathToFqdn = typeof path === 'string' ? path : '';
        return new FqdnTransformationHandler({
            entity: payload,
            transformation,
            pathToFqdn,
        }).transformEntity();
    }, payload);
}
export class FqdnTransformationHandler {
    constructor({ entity, pathToFqdn, transformation, }) {
        this.transformArray = (entitiesArray, index) => {
            return entitiesArray.map((entity) => this.transformEntity(entity, index));
        };
        this.transformMap = (entitiesMap, index) => {
            return Object.entries(entitiesMap).reduce((acc, [key, entity]) => {
                acc[key] = this.transformEntity(entity, index);
                return acc;
            }, {});
        };
        this.path = pathToFqdn.split('.');
        this.entity = cloneDeep(entity);
        this.transformation = transformation;
    }
    transformEntity(entity = this.entity, index = 0) {
        const currentPath = this.path[index];
        if (!currentPath) {
            return transformResponseMessage(entity, this.transformation, builtinCustomFunctions);
        }
        const { schemaName, schemaType } = parseLeanSchemaRef(currentPath);
        const currentEntity = entity[schemaName];
        if (!currentEntity) {
            return entity;
        }
        let transformedEntity;
        if (schemaType === 'Array') {
            transformedEntity = this.transformArray(currentEntity, index + 1);
        }
        else if (schemaType === 'Map') {
            transformedEntity = this.transformMap(currentEntity, index + 1);
        }
        else {
            transformedEntity = this.transformEntity(currentEntity, index + 1);
        }
        set(entity, schemaName, transformedEntity);
        return entity;
    }
}
export function transformError(httpClientError, transformation, argumentNames) {
    const expectedErrorStructure = {
        requestId: httpClientError.requestId,
        response: httpClientError.response?.data,
        httpStatus: httpClientError.response?.status,
        runtimeError: !httpClientError.response ? httpClientError : undefined,
    };
    return cloudEdmTransformError(expectedErrorStructure, transformation, argumentNames);
}
//# sourceMappingURL=transformation-handler.js.map