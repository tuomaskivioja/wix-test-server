{"version":3,"names":["parseLeanSchemaRef","renderedSchemaName","typeOrName","schemaName","getSchemaNameAndType","schemaType","leanSchema","split"],"sources":["../../../src/serialization/utils.ts"],"sourcesContent":["type SchemaType = 'Array' | 'Map';\n\nexport function parseLeanSchemaRef(renderedSchemaName: string = ''): {\n  schemaName: string;\n  schemaType?: SchemaType;\n} {\n  const [typeOrName, schemaName] = getSchemaNameAndType(renderedSchemaName);\n\n  if (schemaName) {\n    return {\n      schemaName,\n      schemaType: typeOrName as SchemaType,\n    };\n  }\n\n  return {\n    schemaName: typeOrName,\n  };\n}\n\n// if there is no type, returns only the name\nconst getSchemaNameAndType = (leanSchema: string): string[] =>\n  leanSchema.split('#');\n"],"mappings":";;;;AAEO,SAASA,kBAAkBA,CAACC,kBAA0B,GAAG,EAAE,EAGhE;EACA,MAAM,CAACC,UAAU,EAAEC,UAAU,CAAC,GAAGC,oBAAoB,CAACH,kBAAkB,CAAC;EAEzE,IAAIE,UAAU,EAAE;IACd,OAAO;MACLA,UAAU;MACVE,UAAU,EAAEH;IACd,CAAC;EACH;EAEA,OAAO;IACLC,UAAU,EAAED;EACd,CAAC;AACH;;AAEA;AACA,MAAME,oBAAoB,GAAIE,UAAkB,IAC9CA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC","ignoreList":[]}