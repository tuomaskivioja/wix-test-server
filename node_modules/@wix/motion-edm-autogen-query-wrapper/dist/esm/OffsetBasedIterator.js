import { Iterator } from './Iterator';
class OffsetBasedIterator extends Iterator {
    constructor({ items, fetchNextPage, fetchPrevPage, offset, originQuery, limit, totalCount, tooManyToCount, }) {
        super({ items, fetchNextPage, fetchPrevPage, originQuery, limit });
        this._totalCount = totalCount;
        this._offset = offset;
        this._tooManyToCount = tooManyToCount;
    }
    get currentPage() {
        return this._limit === 0
            ? undefined
            : Math.floor(this._offset / this._limit);
    }
    get totalPages() {
        return this._tooManyToCount || this._limit === 0
            ? undefined
            : Math.ceil(this._totalCount / this._limit);
    }
    get totalCount() {
        return this._tooManyToCount ? undefined : this._totalCount;
    }
    hasNext() {
        return Boolean(this._limit !== 0 &&
            this.currentPage !== undefined && // currentPage 0 is the first page
            this.totalPages !== undefined &&
            this.currentPage < this.totalPages - 1);
    }
    hasPrev() {
        return Boolean(this._limit !== 0 && this.currentPage && this.currentPage > 0);
    }
}
export { OffsetBasedIterator };
//# sourceMappingURL=OffsetBasedIterator.js.map