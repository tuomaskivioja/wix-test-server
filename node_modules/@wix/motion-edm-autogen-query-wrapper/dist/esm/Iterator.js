class Iterator {
    constructor({ items, originQuery, fetchNextPage, fetchPrevPage, limit, }) {
        this._items = items;
        this._fetchNextPage = fetchNextPage;
        this._fetchPrevPage = fetchPrevPage;
        this._originQuery = originQuery;
        this._limit = limit;
    }
    get items() {
        return this._items;
    }
    get length() {
        return this._items.length;
    }
    get pageSize() {
        return this._limit;
    }
    get query() {
        return this._originQuery;
    }
    async next() {
        if (!this.hasNext()) {
            throw new Error('No next page to fetch');
        }
        const nextPageIterator = await this._fetchNextPage();
        return nextPageIterator;
    }
    async prev() {
        if (!this.hasPrev()) {
            throw new Error('No previous page to fetch');
        }
        const previousPageIterator = await this._fetchPrevPage();
        return previousPageIterator;
    }
}
export { Iterator };
//# sourceMappingURL=Iterator.js.map