"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recover = exports.sendActivationEmail = exports.sendRecoveryEmail = exports.Reason = exports.StatusName = exports.AddressTag = exports.PhoneTag = exports.EmailTag = exports.PrivacyStatus = exports.StateType = exports.TenantType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixIamRecoveryV1Recovery = __importStar(require("./iam-recovery-v1-recovery-recovery.http"));
const address_1 = require("@wix/sdk-runtime/transformations/address");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var TenantType;
(function (TenantType) {
    TenantType["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
    TenantType["ACCOUNT"] = "ACCOUNT";
    TenantType["SITE"] = "SITE";
    TenantType["ROOT"] = "ROOT";
})(TenantType || (exports.TenantType = TenantType = {}));
var StateType;
(function (StateType) {
    /** Initial unknown state. */
    StateType["UNKNOWN_STATE"] = "UNKNOWN_STATE";
    /** The operation completed successfully. */
    StateType["SUCCESS"] = "SUCCESS";
    /** State that indicates that the member needs owner approval to proceed, available action in: OwnerApprovalStateHandler */
    StateType["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
    /**
     * State that indicates a member waiting for verification, available action are: verifyDuringAuthentication or resendDuringAuthentication
     * https://dev.wix.com/docs/rest/api-reference/auth-management/verification-v1/verify-during-authentication
     */
    StateType["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
    /** State that indicates checking that the status is not one of the `invalidStates` before proceeding. */
    StateType["STATUS_CHECK"] = "STATUS_CHECK";
})(StateType || (exports.StateType = StateType = {}));
var PrivacyStatus;
(function (PrivacyStatus) {
    PrivacyStatus["UNDEFINED"] = "UNDEFINED";
    PrivacyStatus["PUBLIC"] = "PUBLIC";
    PrivacyStatus["PRIVATE"] = "PRIVATE";
})(PrivacyStatus || (exports.PrivacyStatus = PrivacyStatus = {}));
var EmailTag;
(function (EmailTag) {
    EmailTag["UNTAGGED"] = "UNTAGGED";
    EmailTag["MAIN"] = "MAIN";
    EmailTag["HOME"] = "HOME";
    EmailTag["WORK"] = "WORK";
})(EmailTag || (exports.EmailTag = EmailTag = {}));
var PhoneTag;
(function (PhoneTag) {
    PhoneTag["UNTAGGED"] = "UNTAGGED";
    PhoneTag["MAIN"] = "MAIN";
    PhoneTag["HOME"] = "HOME";
    PhoneTag["MOBILE"] = "MOBILE";
    PhoneTag["WORK"] = "WORK";
    PhoneTag["FAX"] = "FAX";
})(PhoneTag || (exports.PhoneTag = PhoneTag = {}));
var AddressTag;
(function (AddressTag) {
    AddressTag["UNTAGGED"] = "UNTAGGED";
    AddressTag["HOME"] = "HOME";
    AddressTag["WORK"] = "WORK";
    AddressTag["BILLING"] = "BILLING";
    AddressTag["SHIPPING"] = "SHIPPING";
})(AddressTag || (exports.AddressTag = AddressTag = {}));
var StatusName;
(function (StatusName) {
    StatusName["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    StatusName["PENDING"] = "PENDING";
    StatusName["ACTIVE"] = "ACTIVE";
    StatusName["DELETED"] = "DELETED";
    StatusName["BLOCKED"] = "BLOCKED";
    StatusName["OFFLINE"] = "OFFLINE";
})(StatusName || (exports.StatusName = StatusName = {}));
var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
    Reason["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
})(Reason || (exports.Reason = Reason = {}));
/**
 * Sends a member an email containing a customized link to a Wix-managed page
 * where the member can set a new password for their account.
 * @param email - Email address associated with the account to recover.
 * @public
 * @documentationMaturity preview
 * @requiredField email
 */
async function sendRecoveryEmail(email, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        email: email,
        language: options?.language,
        redirect: options?.redirect,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.sendRecoveryEmail(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                email: '$[0]',
                language: '$[1].language',
                redirect: '$[1].redirect',
            },
            singleArgumentUnchanged: false,
        }, ['email', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.sendRecoveryEmail = sendRecoveryEmail;
/**
 * Sends an activation email with an activation token
 * making the transition from initial contact to a site member
 * @param identityId - Id of the activating user
 * @public
 * @documentationMaturity preview
 * @requiredField identityId
 */
async function sendActivationEmail(identityId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        identityId: identityId,
        emailOptions: options?.emailOptions,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.sendActivationEmail(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                identityId: '$[0]',
                emailOptions: '$[1].emailOptions',
            },
            singleArgumentUnchanged: false,
        }, ['identityId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.sendActivationEmail = sendActivationEmail;
/** @param recoveryToken - recovery token
 * @public
 * @documentationMaturity preview
 * @requiredField recoveryToken
 */
async function recover(recoveryToken, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        recoveryToken: recoveryToken,
        password: options?.password,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.recover(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_1.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                recoveryToken: '$[0]',
                password: '$[1].password',
            },
            singleArgumentUnchanged: false,
        }, ['recoveryToken', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.recover = recover;
