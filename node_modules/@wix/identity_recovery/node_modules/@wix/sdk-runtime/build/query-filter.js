export function isLogicalOperator(filter) {
    return isAndOperator(filter) || isOrOperator(filter) || isNotOperator(filter);
}
export function isAndOperator(filter) {
    return (Object.keys(filter).length === 1 &&
        '$and' in filter &&
        Array.isArray(filter.$and));
}
export function isOrOperator(filter) {
    return (Object.keys(filter).length === 1 &&
        '$or' in filter &&
        Array.isArray(filter.$or));
}
export function isNotOperator(filter) {
    return (Object.keys(filter).length === 1 &&
        '$not' in filter &&
        typeof filter.$not === 'object');
}
export function and(a, b) {
    if (typeof a === 'undefined' || Object.keys(a).length === 0) {
        return b;
    }
    else if (typeof b === 'undefined' || Object.keys(b).length === 0) {
        return a;
    }
    else {
        return {
            $and: [
                ...(isAndOperator(a) ? a.$and : [a]),
                ...(isAndOperator(b) ? b.$and : [b]),
            ],
        };
    }
}
export function or(a, b) {
    if (typeof a === 'undefined' || Object.keys(a).length === 0) {
        return b;
    }
    else if (typeof b === 'undefined' || Object.keys(b).length === 0) {
        return a;
    }
    else {
        return {
            $or: [
                ...(isOrOperator(a) ? a.$or : [a]),
                ...(isOrOperator(b) ? b.$or : [b]),
            ],
        };
    }
}
export function not(a) {
    if (typeof a === 'undefined' || Object.keys(a).length === 0) {
        return undefined;
    }
    else if (isNotOperator(a)) {
        return a.$not;
    }
    else {
        return { $not: a };
    }
}
