"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resendDuringAuthentication = exports.verifyDuringAuthentication = exports.start = void 0;
const float_1 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const metro_runtime_1 = require("@wix/metro-runtime");
function resolveWixIamVerificationV1VerificationServiceUrl(opts) {
    const domainToMappings = {
        'www.wixapis.com': [
            {
                srcPath: '/_api/iam/verification',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/iam/verification',
                destPath: '',
            },
        ],
    };
    return (0, metro_runtime_1.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
/**
 * starts a verification process
 * example: sends a code to the identity's email
 */
function start(payload) {
    function __start({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.verification.v1.start_response',
            method: 'POST',
            methodFqn: 'wix.iam.verification.v1.VerificationService.Start',
            url: resolveWixIamVerificationV1VerificationServiceUrl({
                protoPath: '/v1/Start',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __start;
}
exports.start = start;
/**
 * Continues the registration process when a member is required to verify an email address
 * using a verification code received by email.
 *
 * Email verification is required when the registering member is already listed as a contact.
 *
 * Typically, after a successful verification, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 */
function verifyDuringAuthentication(payload) {
    function __verifyDuringAuthentication({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.verification.v1.start_response',
            method: 'POST',
            methodFqn: 'wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication',
            url: resolveWixIamVerificationV1VerificationServiceUrl({
                protoPath: '/v1/auth/verify',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: float_1.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __verifyDuringAuthentication;
}
exports.verifyDuringAuthentication = verifyDuringAuthentication;
/**
 * Resend the verification email and continue the registration process when a member is required to verify an email address
 * using a verification code received by email.
 */
function resendDuringAuthentication(payload) {
    function __resendDuringAuthentication({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.verification.v1.start_response',
            method: 'POST',
            methodFqn: 'wix.iam.verification.v1.VerificationService.ResendDuringAuthentication',
            url: resolveWixIamVerificationV1VerificationServiceUrl({
                protoPath: '/v1/auth/resend',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: float_1.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __resendDuringAuthentication;
}
exports.resendDuringAuthentication = resendDuringAuthentication;
