import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixIamVerificationV1StartResponse from './iam-verification-v1-start-response-verification.http';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var Target;
(function (Target) {
    Target["UNKNOWN_TARGET"] = "UNKNOWN_TARGET";
    Target["EMAIL"] = "EMAIL";
})(Target || (Target = {}));
export var StateType;
(function (StateType) {
    /** Initial unknown state. */
    StateType["UNKNOWN_STATE"] = "UNKNOWN_STATE";
    /** The operation completed successfully. */
    StateType["SUCCESS"] = "SUCCESS";
    /** State that indicates that the member needs owner approval to proceed, available action in: OwnerApprovalStateHandler */
    StateType["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
    /**
     * State that indicates a member waiting for verification, available action are: verifyDuringAuthentication or resendDuringAuthentication
     * https://dev.wix.com/docs/rest/api-reference/auth-management/verification-v1/verify-during-authentication
     */
    StateType["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
    /** State that indicates checking that the status is not one of the `invalidStates` before proceeding. */
    StateType["STATUS_CHECK"] = "STATUS_CHECK";
})(StateType || (StateType = {}));
export var PrivacyStatus;
(function (PrivacyStatus) {
    PrivacyStatus["UNDEFINED"] = "UNDEFINED";
    PrivacyStatus["PUBLIC"] = "PUBLIC";
    PrivacyStatus["PRIVATE"] = "PRIVATE";
})(PrivacyStatus || (PrivacyStatus = {}));
export var EmailTag;
(function (EmailTag) {
    EmailTag["UNTAGGED"] = "UNTAGGED";
    EmailTag["MAIN"] = "MAIN";
    EmailTag["HOME"] = "HOME";
    EmailTag["WORK"] = "WORK";
})(EmailTag || (EmailTag = {}));
export var PhoneTag;
(function (PhoneTag) {
    PhoneTag["UNTAGGED"] = "UNTAGGED";
    PhoneTag["MAIN"] = "MAIN";
    PhoneTag["HOME"] = "HOME";
    PhoneTag["MOBILE"] = "MOBILE";
    PhoneTag["WORK"] = "WORK";
    PhoneTag["FAX"] = "FAX";
})(PhoneTag || (PhoneTag = {}));
export var AddressTag;
(function (AddressTag) {
    AddressTag["UNTAGGED"] = "UNTAGGED";
    AddressTag["HOME"] = "HOME";
    AddressTag["WORK"] = "WORK";
    AddressTag["BILLING"] = "BILLING";
    AddressTag["SHIPPING"] = "SHIPPING";
})(AddressTag || (AddressTag = {}));
export var StatusName;
(function (StatusName) {
    StatusName["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    StatusName["PENDING"] = "PENDING";
    StatusName["ACTIVE"] = "ACTIVE";
    StatusName["DELETED"] = "DELETED";
    StatusName["BLOCKED"] = "BLOCKED";
    StatusName["OFFLINE"] = "OFFLINE";
})(StatusName || (StatusName = {}));
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
    Reason["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
})(Reason || (Reason = {}));
/**
 * starts a verification process
 * example: sends a code to the identity's email
 * @public
 * @documentationMaturity preview
 */
export async function start(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        identityId: options?.identityId,
        target: options?.target,
    });
    const reqOpts = ambassadorWixIamVerificationV1StartResponse.start(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                identityId: '$[0].identityId',
                target: '$[0].target',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Continues the registration process when a member is required to verify an email address
 * using a verification code received by email.
 *
 * Email verification is required when the registering member is already listed as a contact.
 *
 * Typically, after a successful verification, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 * @param code - The code to verify.
 * @public
 * @documentationMaturity preview
 * @requiredField code
 * @requiredField options
 * @requiredField options.stateToken
 */
export async function verifyDuringAuthentication(code, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        code: code,
        stateToken: options?.stateToken,
    });
    const reqOpts = ambassadorWixIamVerificationV1StartResponse.verifyDuringAuthentication(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                code: '$[0]',
                stateToken: '$[1].stateToken',
            },
            singleArgumentUnchanged: false,
        }, ['code', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Resend the verification email and continue the registration process when a member is required to verify an email address
 * using a verification code received by email.
 * @public
 * @documentationMaturity preview
 * @requiredField stateToken
 */
export async function resendDuringAuthentication(stateToken) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        stateToken: stateToken,
    });
    const reqOpts = ambassadorWixIamVerificationV1StartResponse.resendDuringAuthentication(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { stateToken: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['stateToken']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=iam-verification-v1-start-response-verification.universal.js.map