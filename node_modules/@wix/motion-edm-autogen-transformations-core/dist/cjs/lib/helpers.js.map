{"version":3,"names":["_jsonpathPlus","require","_lodash","_common","_constants","RESPONSE_OBJECT_UNCHANGED","ARRAY_ITEMS_PATH_PROPERTY_NAME","ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME","OMIT_SOURCE_PROPERTY_NAME","FIELDS_TO_OMIT_PROPERTY_NAME","SPREAD_OPERATOR","CONSTANT_VALUE_PROPERTY_NAME","transformations","isInvalidJsonPath","path","isError","attempt","JSONPath","json","exports","isInvalidJsonValue","value","JSON","parse","isSimpleTransformation","transformation","isArrayIndexString","str","test","isSpreadOperator","key","isIdentityResponseTransformation","transformationPath","getArgumentIndex","s","match","groups","Number","argIndex","hasValidArgumentIndex","isRootObjectIdentifier","JSON_PATH_ROOT","isJsonPathExpression","exp","startsWith","stripJsonPathRootPrefix","jsonPath","replace","extractIndexAndPath","simpleTransformation","maybeIndexExpression","rest","split","index","nestedPath","length","join","isMapArrayItemsTransformation","transformationValue","has","parseMapArrayItemsTransformation","sourceArrayExpression","itemTransformation","isOmitTransformation","parseOmitTransformation","sourceExpression","fieldsToOmit","isConstantExpression"],"sources":["../../../src/lib/helpers.ts"],"sourcesContent":["import { JSONPath } from 'jsonpath-plus';\nimport { attempt, has, isError } from 'lodash';\n\nimport { transformations } from './transformations/common';\nimport { JSON_PATH_ROOT } from './transformations/constants';\n\nconst {\n  RESPONSE_OBJECT_UNCHANGED,\n  ARRAY_ITEMS_PATH_PROPERTY_NAME,\n  ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME,\n  OMIT_SOURCE_PROPERTY_NAME,\n  FIELDS_TO_OMIT_PROPERTY_NAME,\n  SPREAD_OPERATOR,\n  CONSTANT_VALUE_PROPERTY_NAME,\n} = transformations;\n\nconst isInvalidJsonPath = (path) =>\n  isError(attempt(() => JSONPath({ path, json: {} })));\n\nconst isInvalidJsonValue = (value) => isError(attempt(() => JSON.parse(value)));\n\nconst isSimpleTransformation = (transformation) =>\n  typeof transformation === 'string';\n\nconst isArrayIndexString = (str) => !!/\\d+/.test(str);\n\nconst isSpreadOperator = (key) => key === SPREAD_OPERATOR;\n\nconst isIdentityResponseTransformation = (transformationPath) =>\n  transformationPath === RESPONSE_OBJECT_UNCHANGED;\n\nconst getArgumentIndex = (s) => {\n  const match = s.match(/\\$\\[(?<argIndex>\\d+)\\]/);\n\n  return match && match.groups && Number(match.groups.argIndex);\n};\n\nconst hasValidArgumentIndex = (path) => getArgumentIndex(path) !== null;\n\nconst isRootObjectIdentifier = (s) => s === JSON_PATH_ROOT;\n\nconst isJsonPathExpression = (exp) => exp && exp.startsWith(JSON_PATH_ROOT);\n\nconst stripJsonPathRootPrefix = (jsonPath) =>\n  jsonPath.replace(`${JSON_PATH_ROOT}.`, '');\n\nconst extractIndexAndPath = (simpleTransformation) => {\n  const [maybeIndexExpression, ...rest] = simpleTransformation.split('.');\n  const index = getArgumentIndex(maybeIndexExpression);\n\n  return {\n    index,\n    nestedPath: index !== null && rest.length > 0 ? rest.join('.') : null,\n  };\n};\n\nconst isMapArrayItemsTransformation = (transformationValue) =>\n  has(transformationValue, ARRAY_ITEMS_PATH_PROPERTY_NAME) &&\n  has(transformationValue, ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME);\n\nconst parseMapArrayItemsTransformation = (transformationValue) => ({\n  sourceArrayExpression: transformationValue[ARRAY_ITEMS_PATH_PROPERTY_NAME],\n  itemTransformation:\n    transformationValue[ARRAY_ITEM_TRANSFORMATION_PROPERTY_NAME],\n});\n\nconst isOmitTransformation = (transformationValue) =>\n  has(transformationValue, OMIT_SOURCE_PROPERTY_NAME) &&\n  has(transformationValue, FIELDS_TO_OMIT_PROPERTY_NAME);\n\nconst parseOmitTransformation = (transformationValue) => ({\n  sourceExpression: transformationValue[OMIT_SOURCE_PROPERTY_NAME],\n  fieldsToOmit: transformationValue[FIELDS_TO_OMIT_PROPERTY_NAME],\n});\n\nconst isConstantExpression = (value) =>\n  has(value, CONSTANT_VALUE_PROPERTY_NAME);\n\nexport {\n  extractIndexAndPath,\n  getArgumentIndex,\n  hasValidArgumentIndex,\n  isArrayIndexString,\n  isConstantExpression,\n  isIdentityResponseTransformation,\n  isInvalidJsonPath,\n  isInvalidJsonValue,\n  isJsonPathExpression,\n  isMapArrayItemsTransformation,\n  isOmitTransformation,\n  isRootObjectIdentifier,\n  isSimpleTransformation,\n  isSpreadOperator,\n  parseMapArrayItemsTransformation,\n  parseOmitTransformation,\n  stripJsonPathRootPrefix,\n};\n"],"mappings":"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","ignoreList":[]}