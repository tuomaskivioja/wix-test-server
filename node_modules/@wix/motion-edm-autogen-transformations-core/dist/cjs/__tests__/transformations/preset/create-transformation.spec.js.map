{"version":3,"names":["_motionRuntimeTestContext","require","_lodash","_","create","buildRequestTransformation","buildResponseTransformation","preset","describe","test","requestMessageEntityPath","aString","tranformationObject","expect","toStrictEqual","entityPathSegments","times","join","responseMessageResultPath","tranformationString"],"sources":["../../../../../src/__tests__/transformations/preset/create-transformation.spec.ts"],"sourcesContent":["import { aString } from '@wix/motion-runtime-test-context';\nimport { times } from 'lodash';\n\nimport { preset } from '../../..';\n\nconst {\n  create: { buildRequestTransformation, buildResponseTransformation },\n} = preset;\n\ndescribe('create-method transformations', () => {\n  describe('buildRequestTransformation', () => {\n    test('creates a transformation that maps the first argument into requestMessageEntityPath', () => {\n      const requestMessageEntityPath = aString();\n\n      const tranformationObject = buildRequestTransformation({\n        requestMessageEntityPath,\n      });\n\n      expect(tranformationObject).toStrictEqual({\n        [requestMessageEntityPath]: '$[0]',\n      });\n    });\n\n    test('supports nested paths', () => {\n      // @ts-expect-error\n      const entityPathSegments = times(2, aString);\n      const requestMessageEntityPath = entityPathSegments.join('.');\n\n      const tranformationObject = buildRequestTransformation({\n        requestMessageEntityPath,\n      });\n\n      expect(tranformationObject).toStrictEqual({\n        [entityPathSegments[0]]: { [entityPathSegments[1]]: '$[0]' },\n      });\n    });\n  });\n\n  describe('buildResponseTransformation', () => {\n    test('unwraps the value of the provided property-path', () => {\n      const responseMessageResultPath = aString();\n\n      const tranformationString = buildResponseTransformation({\n        responseMessageResultPath,\n      });\n\n      expect(tranformationString).toStrictEqual(\n        `$.${responseMessageResultPath}`,\n      );\n    });\n  });\n});\n"],"mappings":";;AAAA,IAAAA,yBAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,CAAA,GAAAF,OAAA;AAEA,MAAM;EACJG,MAAM,EAAE;IAAEC,0BAA0B;IAAEC;EAA4B;AACpE,CAAC,GAAGC,QAAM;AAEVC,QAAQ,CAAC,+BAA+B,EAAE,MAAM;EAC9CA,QAAQ,CAAC,4BAA4B,EAAE,MAAM;IAC3CC,IAAI,CAAC,qFAAqF,EAAE,MAAM;MAChG,MAAMC,wBAAwB,GAAG,IAAAC,iCAAO,EAAC,CAAC;MAE1C,MAAMC,mBAAmB,GAAGP,0BAA0B,CAAC;QACrDK;MACF,CAAC,CAAC;MAEFG,MAAM,CAACD,mBAAmB,CAAC,CAACE,aAAa,CAAC;QACxC,CAACJ,wBAAwB,GAAG;MAC9B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFD,IAAI,CAAC,uBAAuB,EAAE,MAAM;MAClC;MACA,MAAMM,kBAAkB,GAAG,IAAAC,aAAK,EAAC,CAAC,EAAEL,iCAAO,CAAC;MAC5C,MAAMD,wBAAwB,GAAGK,kBAAkB,CAACE,IAAI,CAAC,GAAG,CAAC;MAE7D,MAAML,mBAAmB,GAAGP,0BAA0B,CAAC;QACrDK;MACF,CAAC,CAAC;MAEFG,MAAM,CAACD,mBAAmB,CAAC,CAACE,aAAa,CAAC;QACxC,CAACC,kBAAkB,CAAC,CAAC,CAAC,GAAG;UAAE,CAACA,kBAAkB,CAAC,CAAC,CAAC,GAAG;QAAO;MAC7D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFP,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5CC,IAAI,CAAC,iDAAiD,EAAE,MAAM;MAC5D,MAAMS,yBAAyB,GAAG,IAAAP,iCAAO,EAAC,CAAC;MAE3C,MAAMQ,mBAAmB,GAAGb,2BAA2B,CAAC;QACtDY;MACF,CAAC,CAAC;MAEFL,MAAM,CAACM,mBAAmB,CAAC,CAACL,aAAa,CACvC,KAAKI,yBAAyB,EAChC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}