import { isArray, isPlainObject } from 'lodash';
const extractArgumentFromString = (str, seen = new Set()) => {
    // We expect a single argument in a valid string-transformation at most, e.g. $[1].someField
    const matches = str.match(/(\$\[\d+\])/);
    if (matches) {
        seen.add(matches.pop());
    }
    return seen;
};
const extractArgumensFromObject = (object, seen = new Set()) => Object.keys(object).reduce((acc, key) => {
    const value = object[key];
    if (isPlainObject(value) || isArray(value)) {
        extractArgumensFromObject(value, seen);
    }
    else if (typeof value === 'string') {
        extractArgumentFromString(value, seen);
    }
    return acc;
}, seen);
const getArgumentCardinality = (transformation) => typeof transformation === 'string'
    ? extractArgumentFromString(transformation).size
    : extractArgumensFromObject(transformation).size;
export { getArgumentCardinality };
//# sourceMappingURL=getArgumentCardinality.js.map