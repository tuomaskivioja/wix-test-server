import { get, isString, trim } from 'lodash';
// eslint-disable-next-line max-len
const FUNCTION_CALL_EXPRESSION_REGEX = /^#(?<functionName>[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)\((?<argumentExpressions>[\S ]*)\)$/;
const parseCustomFunctionCall = (functionCallExpression) => {
    const match = functionCallExpression.match(FUNCTION_CALL_EXPRESSION_REGEX);
    const argumentExpressions = get(match, 'groups.argumentExpressions', null);
    return {
        functionName: get(match, 'groups.functionName', null),
        argumentExpressions: argumentExpressions === null
            ? argumentExpressions
            : argumentExpressions
                .split(',')
                .filter((s) => s)
                .map(trim),
    };
};
const isFunctionCallExpression = (expression) => isString(expression) && expression.startsWith('#');
const runCustomFunctionCallExpression = ({ customFunctions, functionName, argumentValues = [], transformationParentPath, }) => {
    const customFunction = get(customFunctions, functionName);
    if (!customFunction) {
        throw new Error(`unrecognized custom function "${functionName}"`);
    }
    try {
        return customFunction(...argumentValues);
    }
    catch (error) {
        throw new Error(`Transforming ${transformationParentPath} failed, #${functionName} threw: "${error.message}" for arguments: ${JSON.stringify(argumentValues)}`);
    }
};
export { isFunctionCallExpression, parseCustomFunctionCall, runCustomFunctionCallExpression, };
//# sourceMappingURL=custom-functions.js.map