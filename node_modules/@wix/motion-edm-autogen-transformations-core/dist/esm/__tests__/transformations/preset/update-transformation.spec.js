import { aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { preset } from '../../..';
const { update: { buildRequestTransformation, buildResponseTransformation }, } = preset;
describe('update-method transformations', () => {
    describe('buildRequestTransformation', () => {
        const requestMessageOptionsPath = aString();
        const requestMessageEntityPath = aString();
        const requestMessageEntityIdentifierField = aString();
        test('creates a transformation mapping args into requestMessageIdentifierPath and requestMessageEntityPath', () => {
            const transformedObject = buildRequestTransformation({
                requestMessageEntityIdentifierField,
                requestMessageEntityPath,
            });
            expect(transformedObject).toStrictEqual({
                [requestMessageEntityPath]: {
                    [requestMessageEntityIdentifierField]: '$[0]',
                    '*': '$[1]',
                },
            });
        });
        test(`creates a transformation that maps the 3rd argument into requestMessageOptionsPath when provided`, () => {
            const transformedObject = buildRequestTransformation({
                requestMessageEntityIdentifierField,
                requestMessageEntityPath,
                requestMessageOptionsPath,
            });
            expect(transformedObject).toStrictEqual({
                [requestMessageEntityPath]: {
                    [requestMessageEntityIdentifierField]: '$[0]',
                    '*': '$[1]',
                },
                [requestMessageOptionsPath]: '$[2]',
            });
        });
        test('supports nested paths for requestMessageEntityPath and requestMessageOptionsPath', () => {
            // @ts-expect-error
            const requestMessageEntityPathSegments = times(2, aString);
            // @ts-expect-error
            const optionsPathSegments = times(2, aString);
            const transformationObject = buildRequestTransformation({
                requestMessageEntityIdentifierField,
                requestMessageEntityPath: requestMessageEntityPathSegments.join('.'),
                requestMessageOptionsPath: optionsPathSegments.join('.'),
            });
            expect(transformationObject).toStrictEqual({
                [requestMessageEntityPathSegments[0]]: {
                    [requestMessageEntityPathSegments[1]]: {
                        [requestMessageEntityIdentifierField]: '$[0]',
                        '*': '$[1]',
                    },
                },
                [optionsPathSegments[0]]: { [optionsPathSegments[1]]: '$[2]' },
            });
        });
        test('supports shared paths for requestMessageEntityPath and requestMessageOptionsPath', () => {
            const sharedPath = aString();
            const transformationObject = buildRequestTransformation({
                requestMessageEntityIdentifierField,
                requestMessageEntityPath: sharedPath,
                requestMessageOptionsPath: sharedPath,
            });
            expect(transformationObject).toStrictEqual({
                [sharedPath]: {
                    [requestMessageEntityIdentifierField]: '$[0]',
                    '*': ['$[1]', '$[2]'],
                },
            });
        });
    });
    describe('buildResponseTransformation', () => {
        test('unwraps the value of the provided property-path', () => {
            const responseMessageResultPath = aString();
            const transformationString = buildResponseTransformation({
                responseMessageResultPath,
            });
            expect(transformationString).toStrictEqual(`$.${responseMessageResultPath}`);
        });
    });
});
//# sourceMappingURL=update-transformation.spec.js.map