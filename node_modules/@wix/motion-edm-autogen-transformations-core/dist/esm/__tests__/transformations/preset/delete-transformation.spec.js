import { aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { preset, transformations } from '../../..';
const { RESPONSE_OBJECT_UNCHANGED } = transformations;
const { delete: { buildRequestTransformation, buildResponseTransformation }, } = preset;
describe('delete-method transformations', () => {
    describe('buildRequestTransformation', () => {
        const requestMessageIdentifierPath = aString();
        test('creates a transformation that maps the first argument into requestMessageIdentifierPath', () => {
            const transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath,
            });
            expect(transformationObject).toStrictEqual({
                [requestMessageIdentifierPath]: '$[0]',
            });
        });
        test(`creates a transformation that maps the 2nd argument into requestMessageOptionsPath when provided`, () => {
            const requestMessageOptionsPath = aString();
            const transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath,
                requestMessageOptionsPath,
            });
            expect(transformationObject).toStrictEqual({
                [requestMessageIdentifierPath]: '$[0]',
                [requestMessageOptionsPath]: '$[1]',
            });
        });
        test('supports shared paths for requestMessageIdentifierPath and requestMessageOptionsPath', () => {
            const sharedPath = aString();
            const identifierPathSegment = aString();
            const transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: `${sharedPath}.${identifierPathSegment}`,
                requestMessageOptionsPath: sharedPath,
            });
            expect(transformationObject).toStrictEqual({
                [sharedPath]: { [identifierPathSegment]: '$[0]', '*': '$[1]' },
            });
        });
        test('supports nested paths', () => {
            // @ts-expect-error
            const idPathSegments = times(2, aString);
            // @ts-expect-error
            const optionsPathSegments = times(2, aString);
            const transformationObject = buildRequestTransformation({
                requestMessageIdentifierPath: idPathSegments.join('.'),
                requestMessageOptionsPath: optionsPathSegments.join('.'),
            });
            expect(transformationObject).toStrictEqual({
                [idPathSegments[0]]: { [idPathSegments[1]]: '$[0]' },
                [optionsPathSegments[0]]: { [optionsPathSegments[1]]: '$[1]' },
            });
        });
    });
    describe('buildResponseTransformation', () => {
        test('returns the identity transformation', () => {
            const trasformationString = buildResponseTransformation();
            expect(trasformationString).toStrictEqual(RESPONSE_OBJECT_UNCHANGED);
        });
    });
});
//# sourceMappingURL=delete-transformation.spec.js.map