import { anObject, aNumber, aString } from '@wix/motion-runtime-test-context';
import { getArgumentCardinality } from '..';
describe('getArgumentCardinality', () => {
    describe('simple transformation', () => {
        const simpleTransformation = `$[${aNumber({
            min: 0,
            max: 9,
        })}].${aString()}`;
        expect(getArgumentCardinality(simpleTransformation)).toStrictEqual(1);
    });
    describe('complex transformations', () => {
        const nonArgumentMapping = anObject();
        const argumentMapping = {
            [aString()]: '$[0].abc',
            [aString()]: '$[1].id',
            [aString()]: '$[2].a',
            [aString()]: '$[3].a.b.c',
            ...nonArgumentMapping,
        };
        const argumentMappingArray = ['$[0].a', '$[1].b', 'a.b.c'];
        test('counts the number of arguments referenced in a given transformation object', () => {
            const complexMappingTransformation = {
                ...nonArgumentMapping,
                ...argumentMapping,
            };
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(4);
        });
        test('counts the number of arguments referenced in a transformation object with arrays', () => {
            const complexMappingTransformation = {
                ...nonArgumentMapping,
                [aString()]: argumentMappingArray,
            };
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(2);
        });
        test('counts only unique occurrences', () => {
            const complexMappingTransformation = {
                ...nonArgumentMapping,
                ...argumentMapping,
                [aString()]: argumentMappingArray,
            };
            expect(getArgumentCardinality(complexMappingTransformation)).toStrictEqual(4);
        });
        test('does not fail on special transformation cases', () => {
            const specialTransformation = {
                [aString()]: { '@constant': true },
                [aString()]: { '@constant': null },
                [aString()]: '$[0].a.b.c.',
            };
            expect(getArgumentCardinality(specialTransformation)).toStrictEqual(1);
        });
    });
});
//# sourceMappingURL=getArgumentCardinality.spec.js.map