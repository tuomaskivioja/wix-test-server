import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixPricingPlansV2Plan from './pricing-plans-v2-plan-plans.http';
export var PeriodUnit;
(function (PeriodUnit) {
    PeriodUnit["UNDEFINED"] = "UNDEFINED";
    PeriodUnit["DAY"] = "DAY";
    PeriodUnit["WEEK"] = "WEEK";
    PeriodUnit["MONTH"] = "MONTH";
    PeriodUnit["YEAR"] = "YEAR";
})(PeriodUnit || (PeriodUnit = {}));
export var AppliedAt;
(function (AppliedAt) {
    AppliedAt["UNKNOWN_CHARGE_EVENT"] = "UNKNOWN_CHARGE_EVENT";
    /** Will charge the fee on first payment. If order has a free trial meaning it will charge after the free trial. */
    AppliedAt["FIRST_PAYMENT"] = "FIRST_PAYMENT";
})(AppliedAt || (AppliedAt = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var ArchivedFilter;
(function (ArchivedFilter) {
    /** Returns all plans that are active. */
    ArchivedFilter["ACTIVE"] = "ACTIVE";
    /** Returns all plans that are archived. */
    ArchivedFilter["ARCHIVED"] = "ARCHIVED";
    /** Returns all plans that are active and archived. */
    ArchivedFilter["ARCHIVED_AND_ACTIVE"] = "ARCHIVED_AND_ACTIVE";
})(ArchivedFilter || (ArchivedFilter = {}));
export var PublicFilter;
(function (PublicFilter) {
    /** Returns all public and hidden plans. */
    PublicFilter["PUBLIC_AND_HIDDEN"] = "PUBLIC_AND_HIDDEN";
    /** Returns only public plans. */
    PublicFilter["PUBLIC"] = "PUBLIC";
    /** Returns only hidden plans. */
    PublicFilter["HIDDEN"] = "HIDDEN";
})(PublicFilter || (PublicFilter = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves a list of public pricing plans.
 *
 *
 * The `listPublicPlans()` function returns a Promise that resolves to a list of up to 100 public pricing plans. Public plans are visible plans that site visitors can see on the site and purchase.
 * @public
 * @param options - Options for filtering and paging the list of public plans.
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - List of public pricing plans.
 */
export async function listPublicPlans(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        limit: options?.limit,
        offset: options?.offset,
        planIds: options?.planIds,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.listPublicPlans(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                limit: '$[0].limit',
                offset: '$[0].offset',
                planIds: '$[0].planIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of public pricing plans.
 *
 *
 * The `queryPublicPlans()` function builds a query to retrieve a list of up to 1,000 public plans and returns a [`PublicPlansQueryBuilder`](#plansquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](#plansquerybuilder/find) function.
 *
 * You can refine the query by chaining `PublicPlansQueryBuilder` functions onto the query. `PublicPlansQueryBuilder` functions enable you to sort, filter, and control the results that `queryPublicPlans()` returns.
 *
 * `queryPublicPlans()` runs with the following `PublicPlansQueryBuilder` defaults that you can override:
 * - [`skip`](#plansquerybuilder/skip): `0`
 * - [`limit`](#plansquerybuilder/limit): `50`
 *
 * The functions that are chained to `queryPublicPlans()` are applied in the order they are called. For example, if you sort on the `_createdDate` property in ascending order and then on the `_id` property in ascending order, the results are sorted first by the created date of the items and then, if there are multiple results with the same date, the items are sorted by `_id` in ascending order, per created date value.
 *
 * The following `PublicPlansQueryBuilder` functions are supported for the `queryPublicPlans()` function. For a full description of the Plans object, see the object returned for the [`items`](#plansqueryresult/items) property in [`PublicPlansQueryResult`](#plansqueryresult).
 * @public
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 */
export function queryPublicPlans() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixPricingPlansV2Plan.queryPublicPlans(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.plans,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
/**
 * Retrieves a pricing plan by the specified ID.
 *
 * The `getPlan()` function returns a Promise that resolves to a plan whose ID matched the specified ID.
 * @param _id - Plan ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The retrieved plan's information.
 */
export async function getPlan(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.getPlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of pricing plans.
 *
 * The `listPlans()` function returns a Promise that resolves to a list of up to 100 pricing plans. This includes public, hidden, and archived plans.
 * @public
 * @documentationMaturity preview
 * @param options - Options for filtering and paging the list of plans.
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - List of plans that match the given criteria.
 */
export async function listPlans(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        archived: options?.archived,
        public: options?.public,
        limit: options?.limit,
        offset: options?.offset,
        planIds: options?.planIds,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.listPlans(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                archived: '$[0].archived',
                public: '$[0].public',
                limit: '$[0].limit',
                offset: '$[0].offset',
                planIds: '$[0].planIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves statistics about the pricing plans.
 *
 *
 * The `getPlanStats()` function returns a Promise that resolves to statistics about the plan on the site.
 *
 * Currently this function provides only the total number of pricing plans, including archived plans.
 * @public
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - Overall statistics about the pricing plans.
 */
export async function getPlanStats() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixPricingPlansV2Plan.getPlanStats(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a pricing plan.
 *
 *
 * The `createPlan()` function returns a Promise that resolves to a newly-created pricing plan after is has successfully been created.
 *
 * The passed `plan` object must contain a [pricing model](https://www.wix.com/velo/reference/wix-pricing-plans-v2/plans/pricing-models). A pricing model can be one of the following:
 * - **A subscription**: A subscription with recurring payment and how often the plan occurs. Subscriptions can have free trial days.
 * - **A plan that does not renew**: A single payment for a specific duration that doesn't renew.
 * - **An unlimited plan**: A single payment for an unlimited amount of time (until canceled).
 *
 * Pricing plans created by this function are available to the site owner in the Pricing Plans section in the Dashboard.
 * @public
 * @requiredField plan
 * @requiredField plan.name
 * @requiredField plan.pricing
 * @requiredField plan.pricing.singlePaymentForDuration.count
 * @requiredField plan.pricing.subscription.cycleCount
 * @requiredField plan.pricing.subscription.cycleDuration
 * @requiredField plan.pricing.subscription.cycleDuration.count
 * @param plan - Information for the plan being created.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The created plan.
 *
 * Rejected - Error message.
 */
export async function createPlan(plan) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ plan: plan });
    const reqOpts = ambassadorWixPricingPlansV2Plan.createPlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { plan: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['plan']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a pricing plan.
 *
 *
 * The `updatePlan()` function returns a Promise that resolves to an updated plan.
 *
 * Updating a plan does not impact existing purchases made for the plan. All purchases keep the details of the original plan that was active at the time of the purchase.
 * @public
 * @requiredField _id
 * @requiredField plan
 * @param _id - ID of the plan to update.
 * @param options - Options for updating the plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The updated plan.
 *
 * Rejected - Error message.
 */
export async function updatePlan(_id, plan) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        plan: { ...plan, id: _id },
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.updatePlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { plan: '$[1]' },
            explicitPathsToArguments: { 'plan.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'plan']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets visibility for non-archived pricing plans.
 *
 * The `setPlanVisibility()` functions returns a Promise that resolves to a pricing plan when its visibility has successfully been set.
 *
 * By default, pricing plans are public, meaning they are visible. [Plans can be hidden](https://support.wix.com/en/article/pricing-plans-removing-a-plan-from-your-site#hiding-plans) so that site members and visitors cannot see or choose them.
 *
 * As opposed to archiving, setting visibility can be reversed. This means that a public plan can be hidden, and a hidden plan can be made public (visible).
 *
 * >**Note:** An archived plan always remains archived and cannot be made active again. When archiving a plan, its `public` property is automatically set to `false` so that it is hidden.
 *
 * Changing a plan's visibility does not impact existing orders for the plan. All orders for hidden plans are still active and keep their terms and payment options.
 * @param visible - Whether to set the plan as visible.
 * @public
 * @requiredField _id
 * @requiredField visible
 * @param _id - The ID of the plan to either display or hide on the site page.
 * @param options - Plan visibility options.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The plan's information.
 *
 * Rejected - Error message.
 */
export async function setPlanVisibility(_id, visible) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        visible: visible,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.setPlanVisibility(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', visible: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'visible']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Marks a pricing plan as the primary pricing plan.
 *
 *
 * The `makePlanPrimary()` function returns a Promise that resolves to the now primary pricing plan.
 *
 * Only a single plan can be marked as a primary plan at any given time. If there is an existing plan marked as primary, calling `makePlanPrimary()` causes the existing primary plan to lose its primary status.
 *
 * When viewing pricing plans on the site, the primary plan is highlighted with a customizable ribbon.
 * @public
 * @requiredField _id
 * @param _id - ID of the pricing plan to set as the primary plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The primary plan.
 */
export async function makePlanPrimary(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.makePlanPrimary(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets all pricing plans to no longer be primary.
 *
 * The `clearPrimary()` function returns a Promise that is resolved when there are no pricing plans marked as `primary`.
 *
 * After clearing the primary plan, when viewing pricing plans on the site, no plan is highlighted with a customizable ribbon.
 * @public
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 */
export async function clearPrimary() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixPricingPlansV2Plan.clearPrimary(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Archives a single plan.
 *
 *
 * The `archivePlan()` function returns a Promise that resolves to the newly-archived plan.
 *
 * When a plan is archived, the plan
 * - Is no longer available for display or selection by visitors. This is because the plan's `public` property is automatically set to `false`.
 * - Cannot be purchased.
 * - Cannot be "un-archived", meaning the plan cannot be made active again.
 *
 * Plan archiving does not impact existing purchases made for the plan. All purchases for the plan are still active and keep their payment options and terms.
 *
 * Site owners can see archived plans in the Dashboard under **Pricing Plans -> Archived Plans**.
 *
 * >**Note:** An attempt to archive an already-archived plan throws an error.
 * @public
 * @requiredField _id
 * @param _id - ID of the active plan to archive.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Fulfilled - The archived plan.
 *
 * Rejected - Error message.
 */
export async function archivePlan(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.archivePlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=pricing-plans-v2-plan-plans.universal.js.map