/** Information about the pricing plan. */
export interface Plan {
    /**
     * Plan ID.
     * @readonly
     */
    id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /** What is included with this plan (e.g., 1 weekly entrance to a specific class). */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is public (visible to site visitors and members). */
    public?: boolean | null;
    /**
     * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
     * @readonly
     */
    archived?: boolean;
    /**
     * Whether the plan is marked as primary.
     * @readonly
     */
    primary?: boolean;
    /**
     * Whether the plan has any orders (including pending and unpaid orders).
     * @readonly
     */
    hasOrders?: boolean;
    /**
     * Date plan was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * Date plan was last updated.
     * @readonly
     */
    updatedDate?: Date;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @readonly
     */
    slug?: string | null;
    /**
     * Number of times the same buyer can purchase the plan. Currently limited to support:
     * - Empty value or a value of `0`, meaning no limitation.
     * - Value of `1`, meaning limited to one purchase per buyer.
     */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     */
    formId?: string | null;
}
/** This wrapper type exist in order to distinguish an empty string list from no list at all in update requests. */
export interface StringList {
    values?: string[];
}
/** Plan pricing information. Includes the price of the plan and payment details. */
export interface Pricing extends PricingPricingModelOneOf {
    /** Plan has recurring payments. */
    subscription?: Recurrence;
    /** One time payment, plan is valid for the specified duration. */
    singlePaymentForDuration?: Duration;
    /** One time payment, plan is valid until it is canceled. */
    singlePaymentUnlimited?: boolean | null;
    /** Amount for a single payment (or the whole subscription if it's not a recurring plan) */
    price?: Money;
    /** Free trial period for the plan in days. Itâ€™s available only for recurring plans. Set to 0 to remove free trial. */
    freeTrialDays?: number | null;
}
/** @oneof */
export interface PricingPricingModelOneOf {
    /** Plan has recurring payments. */
    subscription?: Recurrence;
    /** One time payment, plan is valid for the specified duration. */
    singlePaymentForDuration?: Duration;
    /** One time payment, plan is valid until it is canceled. */
    singlePaymentUnlimited?: boolean | null;
}
/** An object specifying how often and for how long payments recur (may be forever). */
export interface Recurrence {
    /** Length of one payment cycle. */
    cycleDuration?: Duration;
    /**
     * Amount of payment cycles this subscription is valid for.
     *
     * `0` for unlimited or until-canceled.
     */
    cycleCount?: number | null;
}
/** A duration expressed in number of time units. */
export interface Duration {
    /** The amount of a duration `unit` in a single payment cycle. */
    count?: number | null;
    /** Unit of time for the cycle duration. */
    unit?: PeriodUnit;
}
export declare enum PeriodUnit {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface Money {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
export interface FeeConfig {
    /** Fee configuration. */
    fee?: Fee;
    /** The time this fee will be charged */
    appliedAt?: AppliedAt;
}
export interface Fee {
    /** Fee name */
    name?: string;
    /** Amount of fee to be charged */
    amount?: string;
}
export declare enum AppliedAt {
    UNKNOWN_CHARGE_EVENT = "UNKNOWN_CHARGE_EVENT",
    /** Will charge the fee on first payment. If order has a free trial meaning it will charge after the free trial. */
    FIRST_PAYMENT = "FIRST_PAYMENT"
}
export interface ListPublicPlansRequest {
    /** Number of items to list. Defaults to 75. See [Pagination](https://dev.wix.com/api/rest/getting-started/pagination). */
    limit?: number | null;
    /** Number of items to skip. Defaults to 0. See [Pagination](https://dev.wix.com/api/rest/getting-started/pagination). */
    offset?: number | null;
    /** IDs of plans to list. Non-existent IDs will be ignored and won't cause errors. You can pass a maximum of 100 IDs. */
    planIds?: string[];
}
export interface ListPublicPlansResponse {
    /** List of public pricing plans. */
    plans?: PublicPlan[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2;
}
/** Public plan entity containing information about the pricing plan. Can be read by any site member or visitor. */
export interface PublicPlan {
    /** Plan ID. */
    id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /** What is included with this plan (e.g., 1 weekly entrance to a specific class). */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is marked as primary. */
    primary?: boolean;
    /** Date plan was created. */
    createdDate?: Date;
    /** Date plan was last updated. */
    updatedDate?: Date;
    /** URL-friendly version of plan name. Unique across all plans in the same site. */
    slug?: string | null;
    /** Number of times the same buyer can purchase the plan. An empty value or a value of zero means no limitation. */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     */
    formId?: string | null;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface QueryPublicPlansRequest {
    /** Query */
    query?: QueryV2;
}
export interface QueryV2 {
    /** A filter object. See [supported fields and operators](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/filter-and-sort#wix-pricing-plans_pricing-plans_plans_filter-and-sort_query-public-plans) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting[];
    /** Pointer to page of results using offset. Can not be used together with 'cursorPaging' */
    paging?: Paging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface QueryPublicPlansResponse {
    /** List of public pricing plans that match the specified query. */
    plans?: PublicPlan[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2;
}
export interface GetPlanRequest {
    /** Plan ID. */
    id: string;
}
export interface GetPlanResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface ListPlansRequest {
    /** Archived filter. Defaults to ACTIVE (not archived) only. */
    archived?: ArchivedFilter;
    /** Visibility filter. Defaults to PUBLIC_AND_HIDDEN (meaning, both are listed). */
    public?: PublicFilter;
    /** Number of pricing plans to list. Defaults to 75. */
    limit?: number | null;
    /** Number of pricing plans to skip. Defaults to 0. */
    offset?: number | null;
    /** Plan ID filter. Non-existent IDs are ignored, and won't cause errors. You can pass a maximum of 100 IDs. */
    planIds?: string[];
}
export declare enum ArchivedFilter {
    /** Returns all plans that are active. */
    ACTIVE = "ACTIVE",
    /** Returns all plans that are archived. */
    ARCHIVED = "ARCHIVED",
    /** Returns all plans that are active and archived. */
    ARCHIVED_AND_ACTIVE = "ARCHIVED_AND_ACTIVE"
}
export declare enum PublicFilter {
    /** Returns all public and hidden plans. */
    PUBLIC_AND_HIDDEN = "PUBLIC_AND_HIDDEN",
    /** Returns only public plans. */
    PUBLIC = "PUBLIC",
    /** Returns only hidden plans. */
    HIDDEN = "HIDDEN"
}
export interface ListPlansResponse {
    /** List of all public and hidden pricing plans. */
    plans?: Plan[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2;
}
export interface GetPlanStatsRequest {
}
export interface GetPlanStatsResponse {
    /** Total number of plans created, including active plans (both public and hidden) and archived plans. */
    totalPlans?: number;
}
export interface CreatePlanRequest {
    /** Plan to be created. */
    plan: Plan;
}
export interface CreatePlanResponse {
    /** Plan that was created. */
    plan?: Plan;
}
export interface UpdatePlanRequest {
    /** Plan to be updated. */
    plan: Plan;
}
export interface UpdatePlanResponse {
    /** Plan that was updated. */
    plan?: Plan;
}
export interface BuyerCanCancelUpdated {
    /** Pricing plan. */
    plan?: Plan;
}
export interface SetPlanVisibilityRequest {
    /** Plan id. */
    id: string;
    /** If true, the Pricing Plan is visible. */
    visible: boolean;
}
export interface SetPlanVisibilityResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface MakePlanPrimaryRequest {
    id: string;
}
export interface MakePlanPrimaryResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface ClearPrimaryRequest {
}
export interface ClearPrimaryResponse {
}
export interface ArchivePlanRequest {
    id: string;
}
export interface ArchivePlanResponse {
    /** Archived plan. */
    plan?: Plan;
}
export interface PlanArchived {
    /** Pricing plan. */
    plan?: Plan;
}
export interface BulkArchivePlanRequest {
    /** List of Plan IDs. */
    ids?: string[];
    /** Set to true to return Plan entity in response. */
    returnFullEntity?: boolean;
}
export interface BulkArchivePlanResponse {
    /** Plans to be archived. */
    results?: BulkPlanResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkPlanResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** Pricing plan. */
    plan?: Plan;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface ArrangePlansRequest {
    /** List of plan IDs. */
    ids?: string[];
}
export interface ArrangePlansResponse {
}
export interface CountPlansRequest {
    /** The filter. */
    filter?: Record<string, any> | null;
    /** If true, will count only visible plans (visible and not archived). If no value is given all site's plans will be counted. */
    visibility?: boolean | null;
}
export interface CountPlansResponse {
    /** Number of plans in the response. */
    count?: number;
}
export interface GetPlansPremiumStatusRequest {
}
export interface GetPlansPremiumStatusResponse {
    /** True if site has non-free, non-template plans. */
    hasPaidPlans?: boolean;
    /** True if site has plans that were created before Pricing Plans became a premium app. */
    hasOldPlans?: boolean;
}
export interface SearchPlansRequest {
    /** Query */
    query?: QueryV2;
    /** Search phrase for plan name */
    searchPhrase?: string | null;
}
export interface SearchPlansResponse {
    /** List of pricing plans that match the specified filter and search phrase. */
    plans?: Plan[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface StringListNonNullableFields {
    values: string[];
}
interface DurationNonNullableFields {
    unit: PeriodUnit;
}
interface RecurrenceNonNullableFields {
    cycleDuration?: DurationNonNullableFields;
}
interface MoneyNonNullableFields {
    value: string;
    currency: string;
}
interface FeeNonNullableFields {
    name: string;
    amount: string;
}
interface FeeConfigNonNullableFields {
    fee?: FeeNonNullableFields;
    appliedAt: AppliedAt;
}
interface PricingNonNullableFields {
    subscription?: RecurrenceNonNullableFields;
    singlePaymentForDuration?: DurationNonNullableFields;
    price?: MoneyNonNullableFields;
    feeConfigs: FeeConfigNonNullableFields[];
}
interface PublicPlanNonNullableFields {
    id: string;
    perks?: StringListNonNullableFields;
    pricing?: PricingNonNullableFields;
    primary: boolean;
}
export interface ListPublicPlansResponseNonNullableFields {
    plans: PublicPlanNonNullableFields[];
}
export interface QueryPublicPlansResponseNonNullableFields {
    plans: PublicPlanNonNullableFields[];
}
interface PlanNonNullableFields {
    id: string;
    perks?: StringListNonNullableFields;
    pricing?: PricingNonNullableFields;
    archived: boolean;
    primary: boolean;
    hasOrders: boolean;
}
export interface GetPlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export interface ListPlansResponseNonNullableFields {
    plans: PlanNonNullableFields[];
}
export interface GetPlanStatsResponseNonNullableFields {
    totalPlans: number;
}
export interface CreatePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export interface UpdatePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export interface SetPlanVisibilityResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export interface MakePlanPrimaryResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export interface ArchivePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
export {};
