/** Information about the pricing plan. */
interface Plan$1 {
    /**
     * Plan ID.
     * @readonly
     */
    id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /** What is included with this plan (e.g., 1 weekly entrance to a specific class). */
    perks?: StringList$1;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing$1;
    /** Whether the plan is public (visible to site visitors and members). */
    public?: boolean | null;
    /**
     * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
     * @readonly
     */
    archived?: boolean;
    /**
     * Whether the plan is marked as primary.
     * @readonly
     */
    primary?: boolean;
    /**
     * Whether the plan has any orders (including pending and unpaid orders).
     * @readonly
     */
    hasOrders?: boolean;
    /**
     * Date plan was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * Date plan was last updated.
     * @readonly
     */
    updatedDate?: Date;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @readonly
     */
    slug?: string | null;
    /**
     * Number of times the same buyer can purchase the plan. Currently limited to support:
     * - Empty value or a value of `0`, meaning no limitation.
     * - Value of `1`, meaning limited to one purchase per buyer.
     */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     */
    formId?: string | null;
}
/** This wrapper type exist in order to distinguish an empty string list from no list at all in update requests. */
interface StringList$1 {
    values?: string[];
}
/** Plan pricing information. Includes the price of the plan and payment details. */
interface Pricing$1 extends PricingPricingModelOneOf$1 {
    /** Plan has recurring payments. */
    subscription?: Recurrence$1;
    /** One time payment, plan is valid for the specified duration. */
    singlePaymentForDuration?: Duration$1;
    /** One time payment, plan is valid until it is canceled. */
    singlePaymentUnlimited?: boolean | null;
    /** Amount for a single payment (or the whole subscription if it's not a recurring plan) */
    price?: Money$1;
    /** Free trial period for the plan in days. Itâ€™s available only for recurring plans. Set to 0 to remove free trial. */
    freeTrialDays?: number | null;
}
/** @oneof */
interface PricingPricingModelOneOf$1 {
    /** Plan has recurring payments. */
    subscription?: Recurrence$1;
    /** One time payment, plan is valid for the specified duration. */
    singlePaymentForDuration?: Duration$1;
    /** One time payment, plan is valid until it is canceled. */
    singlePaymentUnlimited?: boolean | null;
}
/** An object specifying how often and for how long payments recur (may be forever). */
interface Recurrence$1 {
    /** Length of one payment cycle. */
    cycleDuration?: Duration$1;
    /**
     * Amount of payment cycles this subscription is valid for.
     *
     * `0` for unlimited or until-canceled.
     */
    cycleCount?: number | null;
}
/** A duration expressed in number of time units. */
interface Duration$1 {
    /** The amount of a duration `unit` in a single payment cycle. */
    count?: number | null;
    /** Unit of time for the cycle duration. */
    unit?: PeriodUnit$1;
}
declare enum PeriodUnit$1 {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface Money$1 {
    /** Monetary amount. Decimal string with a period as a decimal separator (e.g., 3.99). */
    value?: string;
    /** Currency code. Must be valid ISO 4217 currency code (e.g., USD). */
    currency?: string;
}
declare enum AppliedAt$1 {
    UNKNOWN_CHARGE_EVENT = "UNKNOWN_CHARGE_EVENT",
    /** Will charge the fee on first payment. If order has a free trial meaning it will charge after the free trial. */
    FIRST_PAYMENT = "FIRST_PAYMENT"
}
interface ListPublicPlansRequest$1 {
    /** Number of items to list. Defaults to 75. See [Pagination](https://dev.wix.com/api/rest/getting-started/pagination). */
    limit?: number | null;
    /** Number of items to skip. Defaults to 0. See [Pagination](https://dev.wix.com/api/rest/getting-started/pagination). */
    offset?: number | null;
    /** IDs of plans to list. Non-existent IDs will be ignored and won't cause errors. You can pass a maximum of 100 IDs. */
    planIds?: string[];
}
interface ListPublicPlansResponse$1 {
    /** List of public pricing plans. */
    plans?: PublicPlan$1[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2$1;
}
/** Public plan entity containing information about the pricing plan. Can be read by any site member or visitor. */
interface PublicPlan$1 {
    /** Plan ID. */
    id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /** What is included with this plan (e.g., 1 weekly entrance to a specific class). */
    perks?: StringList$1;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing$1;
    /** Whether the plan is marked as primary. */
    primary?: boolean;
    /** Date plan was created. */
    createdDate?: Date;
    /** Date plan was last updated. */
    updatedDate?: Date;
    /** URL-friendly version of plan name. Unique across all plans in the same site. */
    slug?: string | null;
    /** Number of times the same buyer can purchase the plan. An empty value or a value of zero means no limitation. */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     */
    formId?: string | null;
}
interface PagingMetadataV2$1 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors$1;
}
interface Cursors$1 {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface QueryPublicPlansRequest$1 {
    /** Query */
    query?: QueryV2$1;
}
interface QueryV2$1 {
    /** A filter object. See [supported fields and operators](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/filter-and-sort#wix-pricing-plans_pricing-plans_plans_filter-and-sort_query-public-plans) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting$1[];
    /** Pointer to page of results using offset. Can not be used together with 'cursorPaging' */
    paging?: Paging$1;
}
interface Sorting$1 {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder$1;
}
declare enum SortOrder$1 {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging$1 {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface QueryPublicPlansResponse$1 {
    /** List of public pricing plans that match the specified query. */
    plans?: PublicPlan$1[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2$1;
}
interface GetPlanRequest$1 {
    /** Plan ID. */
    id: string;
}
interface GetPlanResponse$1 {
    /** Pricing plan. */
    plan?: Plan$1;
}
interface ListPlansRequest$1 {
    /** Archived filter. Defaults to ACTIVE (not archived) only. */
    archived?: ArchivedFilter$1;
    /** Visibility filter. Defaults to PUBLIC_AND_HIDDEN (meaning, both are listed). */
    public?: PublicFilter$1;
    /** Number of pricing plans to list. Defaults to 75. */
    limit?: number | null;
    /** Number of pricing plans to skip. Defaults to 0. */
    offset?: number | null;
    /** Plan ID filter. Non-existent IDs are ignored, and won't cause errors. You can pass a maximum of 100 IDs. */
    planIds?: string[];
}
declare enum ArchivedFilter$1 {
    /** Returns all plans that are active. */
    ACTIVE = "ACTIVE",
    /** Returns all plans that are archived. */
    ARCHIVED = "ARCHIVED",
    /** Returns all plans that are active and archived. */
    ARCHIVED_AND_ACTIVE = "ARCHIVED_AND_ACTIVE"
}
declare enum PublicFilter$1 {
    /** Returns all public and hidden plans. */
    PUBLIC_AND_HIDDEN = "PUBLIC_AND_HIDDEN",
    /** Returns only public plans. */
    PUBLIC = "PUBLIC",
    /** Returns only hidden plans. */
    HIDDEN = "HIDDEN"
}
interface ListPlansResponse$1 {
    /** List of all public and hidden pricing plans. */
    plans?: Plan$1[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2$1;
}
interface GetPlanStatsRequest$1 {
}
interface GetPlanStatsResponse$1 {
    /** Total number of plans created, including active plans (both public and hidden) and archived plans. */
    totalPlans?: number;
}
interface CreatePlanRequest$1 {
    /** Plan to be created. */
    plan: Plan$1;
}
interface CreatePlanResponse$1 {
    /** Plan that was created. */
    plan?: Plan$1;
}
interface UpdatePlanRequest$1 {
    /** Plan to be updated. */
    plan: Plan$1;
}
interface UpdatePlanResponse$1 {
    /** Plan that was updated. */
    plan?: Plan$1;
}
interface SetPlanVisibilityRequest$1 {
    /** Plan id. */
    id: string;
    /** If true, the Pricing Plan is visible. */
    visible: boolean;
}
interface SetPlanVisibilityResponse$1 {
    /** Pricing plan. */
    plan?: Plan$1;
}
interface MakePlanPrimaryRequest$1 {
    id: string;
}
interface MakePlanPrimaryResponse$1 {
    /** Pricing plan. */
    plan?: Plan$1;
}
interface ClearPrimaryRequest$1 {
}
interface ClearPrimaryResponse$1 {
}
interface ArchivePlanRequest$1 {
    id: string;
}
interface ArchivePlanResponse$1 {
    /** Archived plan. */
    plan?: Plan$1;
}
interface StringListNonNullableFields$1 {
    values: string[];
}
interface DurationNonNullableFields$1 {
    unit: PeriodUnit$1;
}
interface RecurrenceNonNullableFields$1 {
    cycleDuration?: DurationNonNullableFields$1;
}
interface MoneyNonNullableFields$1 {
    value: string;
    currency: string;
}
interface FeeNonNullableFields$1 {
    name: string;
    amount: string;
}
interface FeeConfigNonNullableFields$1 {
    fee?: FeeNonNullableFields$1;
    appliedAt: AppliedAt$1;
}
interface PricingNonNullableFields$1 {
    subscription?: RecurrenceNonNullableFields$1;
    singlePaymentForDuration?: DurationNonNullableFields$1;
    price?: MoneyNonNullableFields$1;
    feeConfigs: FeeConfigNonNullableFields$1[];
}
interface PublicPlanNonNullableFields$1 {
    id: string;
    perks?: StringListNonNullableFields$1;
    pricing?: PricingNonNullableFields$1;
    primary: boolean;
}
interface ListPublicPlansResponseNonNullableFields$1 {
    plans: PublicPlanNonNullableFields$1[];
}
interface QueryPublicPlansResponseNonNullableFields$1 {
    plans: PublicPlanNonNullableFields$1[];
}
interface PlanNonNullableFields$1 {
    id: string;
    perks?: StringListNonNullableFields$1;
    pricing?: PricingNonNullableFields$1;
    archived: boolean;
    primary: boolean;
    hasOrders: boolean;
}
interface GetPlanResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}
interface ListPlansResponseNonNullableFields$1 {
    plans: PlanNonNullableFields$1[];
}
interface GetPlanStatsResponseNonNullableFields$1 {
    totalPlans: number;
}
interface CreatePlanResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}
interface UpdatePlanResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}
interface SetPlanVisibilityResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}
interface MakePlanPrimaryResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}
interface ArchivePlanResponseNonNullableFields$1 {
    plan?: PlanNonNullableFields$1;
}

/** Information about the pricing plan. */
interface Plan {
    /**
     * Plan ID.
     * @readonly
     */
    _id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /**
     * List of text strings that promote what is included with this plan.
     *
     * For example, "Plenty of parking" or "Free gift on your birthday".
     */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is public (visible to site visitors and members). */
    public?: boolean | null;
    /**
     * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
     * @readonly
     */
    archived?: boolean;
    /**
     * Whether the plan is marked as primary. If `true`, the plan is highlighted on the site with a custom ribbon.
     *
     * Default: `false`.
     * @readonly
     */
    primary?: boolean;
    /**
     * Whether the plan has any orders (including pending and unpaid orders).
     * @readonly
     */
    hasOrders?: boolean;
    /**
     * Date plan was created.
     * @readonly
     */
    _createdDate?: Date;
    /**
     * Date plan was last updated.
     * @readonly
     */
    _updatedDate?: Date;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @readonly
     */
    slug?: string | null;
    /**
     * Number of times the same buyer can purchase the plan. Currently limited to support:
     * - Empty value or a value of `0`, meaning no limitation.
     * - Value of `1`, meaning limited to one purchase per buyer.
     */
    maxPurchasesPerBuyer?: number | null;
    /**
     * Whether the buyer can start the plan at a later date.
     *
     * Default: `false`.
     *
     */
    allowFutureStartDate?: boolean | null;
    /**
     * Whether the buyer is allowed to cancel their plan. If `false`, calling the [`requestCancellation()`](https://www.wix.com/velo/reference/wix-pricing-plans-v2/orders/requestcancellation) function returns an error.
     *
     * Default: `true`.
     *
     */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /** ID of the form associated with the plan at checkout. */
    formId?: string | null;
}
/** This wrapper type exist in order to distinguish an empty string list from no list at all in update requests. */
interface StringList {
    values?: string[];
}
/** Plan pricing information. Includes the price of the plan and payment details. */
interface Pricing extends PricingPricingModelOneOf {
    /**
     * Pricing model indicating that the plan has recurring payments.
     *
     * Note: This type of subscription is not a "Wix subscription," which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and *all* pricing plan models.
     */
    subscription?: Recurrence;
    /** Pricing model indicating a single payment per cycle and the length of the cycle. The cycle is the duration of the plan, not a payment cycle. */
    singlePaymentForDuration?: Duration;
    /** Pricing model indicating the plan is paid in one single payment. The plan is valid until canceled.   */
    singlePaymentUnlimited?: boolean | null;
    /** Amount for a single payment. For subscriptions, this is the amount to pay each payment cycle and it is required. For plans that are not recurring plans, it is the single payment amount for the whole subscription.  */
    price?: Money;
    /** Free trial period for the plan in days. Available only for recurring plans, meaning plans whose pricing model is `subscription`. Set to `0` to remove the free trial.  */
    freeTrialDays?: number | null;
}
/** @oneof */
interface PricingPricingModelOneOf {
    /** Plan has recurring payments. */
    subscription?: Recurrence;
    /** One time payment, plan is valid for the specified duration. */
    singlePaymentForDuration?: Duration;
    /** One time payment, plan is valid until it is canceled. */
    singlePaymentUnlimited?: boolean | null;
}
/** An object specifying how often and for how long payments recur (may be forever). */
interface Recurrence {
    /** Length of one payment cycle. For example, 1 month to have monthly payments. Multiply `cycleDuration`'s `count` by `cycleCount` to get the subscription duration. Currently, only a value of `1` is supported.  */
    cycleDuration?: Duration;
    /**
     * Amount of payment cycles the subscription is valid for.
     *
     * `0` for unlimited plans or for plans that are valid until canceled.
     */
    cycleCount?: number | null;
}
/** A duration expressed in number of time units. */
interface Duration {
    /** Number of days days, months, weeks, or years in a single payment cycle. Currently limited to support only `1`.  */
    count?: number | null;
    /** Unit of time for the cycle duration. */
    unit?: PeriodUnit;
}
declare enum PeriodUnit {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
interface Money {
    /** Monetary amount. Decimal string with a period as a decimal separator. For example, `'3.99'`. Cannot be a negative value.   */
    value?: string;
    /**
     * Currency code. Three-letter currency code in
     * [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format. For example, `'USD'`.
     */
    currency?: string;
}
declare enum AppliedAt {
    UNKNOWN_CHARGE_EVENT = "UNKNOWN_CHARGE_EVENT",
    /** Will charge the fee on first payment. If order has a free trial meaning it will charge after the free trial. */
    FIRST_PAYMENT = "FIRST_PAYMENT"
}
interface ListPublicPlansRequest {
    /**
     * Number of pricing plans to list.
     *
     * Default: `75`.
     */
    limit?: number | null;
    /**
     * Number of pricing plans to skip.
     *
     * Default: `0`.
     */
    offset?: number | null;
    /** IDs of public plans to list. If non-existent IDs are specified, they are ignored and don't cause errors. If no IDs are specified, all public are listed according to the [order](#arrangeplans) displayed in the Dashboard. You can pass a maximum of 100 IDs.  */
    planIds?: string[];
}
interface ListPublicPlansResponse {
    /** List of public pricing plans. */
    plans?: PublicPlan[];
    /** Details on the paged set of public pricing plans returned.  */
    pagingMetadata?: PagingMetadataV2;
}
/** Public plan entity containing information about the pricing plan. Can be read by any site member or visitor. */
interface PublicPlan {
    /** Plan ID. */
    _id?: string;
    /** Plan name. */
    name?: string | null;
    /** Plan description. */
    description?: string | null;
    /** What is included with this plan (e.g., 1 weekly entrance to a specific class). */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is marked as primary. */
    primary?: boolean;
    /** Date plan was created. */
    _createdDate?: Date;
    /** Date plan was last updated. */
    _updatedDate?: Date;
    /** URL-friendly version of plan name. Unique across all plans in the same site. */
    slug?: string | null;
    /** Number of times the same buyer can purchase the plan. An empty value or a value of zero means no limitation. */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information will be displayed during checkout. */
    termsAndConditions?: string | null;
    /** ID of the form associated with the plan at checkout. */
    formId?: string | null;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
interface QueryPublicPlansRequest {
    /** Query */
    query?: QueryV2;
}
interface QueryV2 {
    /** A filter object. See [supported fields and operators](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/filter-and-sort#wix-pricing-plans_pricing-plans_plans_filter-and-sort_query-public-plans) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting[];
    /** Pointer to page of results using offset. Can not be used together with 'cursorPaging' */
    paging?: Paging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface QueryPublicPlansResponse {
    /** List of public pricing plans that match the specified query. */
    plans?: PublicPlan[];
    /** Object containing paging-related data (number of plans returned, offset). */
    pagingMetadata?: PagingMetadataV2;
}
interface GetPlanRequest {
    /** Plan ID. */
    _id: string;
}
interface GetPlanResponse {
    /** Pricing plan info.  */
    plan?: Plan;
}
interface ListPlansRequest {
    /**
     * Archived filter.
     *
     * Default: `ACTIVE` (not archived).
     */
    archived?: ArchivedFilter;
    /**
     * Visibility filter.
     *
     * Default: `PUBLIC_AND_HIDDEN` (meaning, both public and hidden plans are listed).
     *
     */
    public?: PublicFilter;
    /**
     * Number of pricing plans to list.
     *
     * Default: `75`.
     */
    limit?: number | null;
    /**
     * Number of pricing plans to skip.
     *
     * Default: `0`.
     */
    offset?: number | null;
    /** IDs of plans to list. If non-existent IDs are specified, they are ignored and don't cause errors. If no IDs are specified, all public and hidden plans (based on `options`) are listed according to the [order](#arrangeplans) displayed in the Dashboard. You can pass a maximum of 100 IDs.  */
    planIds?: string[];
}
declare enum ArchivedFilter {
    /** Returns all plans that are active. */
    ACTIVE = "ACTIVE",
    /** Returns all plans that are archived. */
    ARCHIVED = "ARCHIVED",
    /** Returns all plans that are active and archived. */
    ARCHIVED_AND_ACTIVE = "ARCHIVED_AND_ACTIVE"
}
declare enum PublicFilter {
    /** Returns all public and hidden plans. */
    PUBLIC_AND_HIDDEN = "PUBLIC_AND_HIDDEN",
    /** Returns only public plans. */
    PUBLIC = "PUBLIC",
    /** Returns only hidden plans. */
    HIDDEN = "HIDDEN"
}
interface ListPlansResponse {
    /** List of all public and hidden pricing plans. */
    plans?: Plan[];
    /** Details on the paged set of pricing plans returned.  */
    pagingMetadata?: PagingMetadataV2;
}
interface GetPlanStatsRequest {
}
interface GetPlanStatsResponse {
    /** Total number of plans created, including active plans (both public and hidden) and archived plans. */
    totalPlans?: number;
}
interface CreatePlanRequest {
    /** Information for the plan being created. */
    plan: Plan;
}
interface CreatePlanResponse {
    /** Plan info.  */
    plan?: Plan;
}
interface UpdatePlanRequest {
    /** Plan info to update. */
    plan: Plan;
}
interface UpdatePlanResponse {
    /** Updated plan info. */
    plan?: Plan;
}
interface SetPlanVisibilityRequest {
    /** The ID of the plan to either display or hide on the site page.  */
    _id: string;
    /** Whether to set the plan as visible. */
    visible: boolean;
}
interface SetPlanVisibilityResponse {
    /** Plan info.  */
    plan?: Plan;
}
interface MakePlanPrimaryRequest {
    /** ID of the pricing plan to set as the primary plan. */
    _id: string;
}
interface MakePlanPrimaryResponse {
    /** Primary plan info. */
    plan?: Plan;
}
interface ClearPrimaryRequest {
}
interface ClearPrimaryResponse {
}
interface ArchivePlanRequest {
    _id: string;
}
interface ArchivePlanResponse {
    /** Archived plan info.  */
    plan?: Plan;
}
interface StringListNonNullableFields {
    values: string[];
}
interface DurationNonNullableFields {
    unit: PeriodUnit;
}
interface RecurrenceNonNullableFields {
    cycleDuration?: DurationNonNullableFields;
}
interface MoneyNonNullableFields {
    value: string;
    currency: string;
}
interface FeeNonNullableFields {
    name: string;
    amount: string;
}
interface FeeConfigNonNullableFields {
    fee?: FeeNonNullableFields;
    appliedAt: AppliedAt;
}
interface PricingNonNullableFields {
    subscription?: RecurrenceNonNullableFields;
    singlePaymentForDuration?: DurationNonNullableFields;
    price?: MoneyNonNullableFields;
    feeConfigs: FeeConfigNonNullableFields[];
}
interface PublicPlanNonNullableFields {
    _id: string;
    perks?: StringListNonNullableFields;
    pricing?: PricingNonNullableFields;
    primary: boolean;
}
interface ListPublicPlansResponseNonNullableFields {
    plans: PublicPlanNonNullableFields[];
}
interface QueryPublicPlansResponseNonNullableFields {
    plans: PublicPlanNonNullableFields[];
}
interface PlanNonNullableFields {
    _id: string;
    perks?: StringListNonNullableFields;
    pricing?: PricingNonNullableFields;
    archived: boolean;
    primary: boolean;
    hasOrders: boolean;
}
interface GetPlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
interface ListPlansResponseNonNullableFields {
    plans: PlanNonNullableFields[];
}
interface GetPlanStatsResponseNonNullableFields {
    totalPlans: number;
}
interface CreatePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
interface UpdatePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
interface SetPlanVisibilityResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
interface MakePlanPrimaryResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}
interface ArchivePlanResponseNonNullableFields {
    plan?: PlanNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function listPublicPlans(): __PublicMethodMetaInfo<'GET', {}, ListPublicPlansRequest, ListPublicPlansRequest$1, ListPublicPlansResponse & ListPublicPlansResponseNonNullableFields, ListPublicPlansResponse$1 & ListPublicPlansResponseNonNullableFields$1>;
declare function queryPublicPlans(): __PublicMethodMetaInfo<'POST', {}, QueryPublicPlansRequest, QueryPublicPlansRequest$1, QueryPublicPlansResponse & QueryPublicPlansResponseNonNullableFields, QueryPublicPlansResponse$1 & QueryPublicPlansResponseNonNullableFields$1>;
declare function getPlan(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetPlanRequest, GetPlanRequest$1, GetPlanResponse & GetPlanResponseNonNullableFields, GetPlanResponse$1 & GetPlanResponseNonNullableFields$1>;
declare function listPlans(): __PublicMethodMetaInfo<'GET', {}, ListPlansRequest, ListPlansRequest$1, ListPlansResponse & ListPlansResponseNonNullableFields, ListPlansResponse$1 & ListPlansResponseNonNullableFields$1>;
declare function getPlanStats(): __PublicMethodMetaInfo<'GET', {}, GetPlanStatsRequest, GetPlanStatsRequest$1, GetPlanStatsResponse & GetPlanStatsResponseNonNullableFields, GetPlanStatsResponse$1 & GetPlanStatsResponseNonNullableFields$1>;
declare function createPlan(): __PublicMethodMetaInfo<'POST', {}, CreatePlanRequest, CreatePlanRequest$1, CreatePlanResponse & CreatePlanResponseNonNullableFields, CreatePlanResponse$1 & CreatePlanResponseNonNullableFields$1>;
declare function updatePlan(): __PublicMethodMetaInfo<'PATCH', {
    planId: string;
}, UpdatePlanRequest, UpdatePlanRequest$1, UpdatePlanResponse & UpdatePlanResponseNonNullableFields, UpdatePlanResponse$1 & UpdatePlanResponseNonNullableFields$1>;
declare function setPlanVisibility(): __PublicMethodMetaInfo<'PUT', {
    id: string;
}, SetPlanVisibilityRequest, SetPlanVisibilityRequest$1, SetPlanVisibilityResponse & SetPlanVisibilityResponseNonNullableFields, SetPlanVisibilityResponse$1 & SetPlanVisibilityResponseNonNullableFields$1>;
declare function makePlanPrimary(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, MakePlanPrimaryRequest, MakePlanPrimaryRequest$1, MakePlanPrimaryResponse & MakePlanPrimaryResponseNonNullableFields, MakePlanPrimaryResponse$1 & MakePlanPrimaryResponseNonNullableFields$1>;
declare function clearPrimary(): __PublicMethodMetaInfo<'POST', {}, ClearPrimaryRequest, ClearPrimaryRequest$1, ClearPrimaryResponse, ClearPrimaryResponse$1>;
declare function archivePlan(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, ArchivePlanRequest, ArchivePlanRequest$1, ArchivePlanResponse & ArchivePlanResponseNonNullableFields, ArchivePlanResponse$1 & ArchivePlanResponseNonNullableFields$1>;

export { type __PublicMethodMetaInfo, archivePlan, clearPrimary, createPlan, getPlan, getPlanStats, listPlans, listPublicPlans, makePlanPrimary, queryPublicPlans, setPlanVisibility, updatePlan };
