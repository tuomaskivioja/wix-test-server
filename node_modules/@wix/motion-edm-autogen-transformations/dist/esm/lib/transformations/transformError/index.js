import { constantCase } from 'constant-case';
import { getReasonPhrase } from 'http-status-codes';
import yaml from 'js-yaml';
import _ from 'lodash';
import { ErrorType } from '../../constants';
import { violationsWithRenamedFields } from './violationsWithRenamedFields';
const { get, has, forOwn, isEqual } = _;
const UNKNOWN_STATUS_CODE_TEST = 'Unknown';
const MAX_YAML_LINE_WIDTH = 1000;
const CANCELLED_STATUS_CODE = 499;
const CANCELLED_STATUS_CODE_STRING = CANCELLED_STATUS_CODE.toString();
const CANCELLED_STATUS_TEXT = 'Client Closed Request';
const toYamlString = (object) => yaml.dump(object, { lineWidth: MAX_YAML_LINE_WIDTH }).replace(/\n$/, '');
const ambassadorSafeStatusText = (_maybeHttpStatus) => {
    if (_maybeHttpStatus === CANCELLED_STATUS_CODE ||
        _maybeHttpStatus === CANCELLED_STATUS_CODE_STRING) {
        return CANCELLED_STATUS_TEXT;
    }
    try {
        return getReasonPhrase(_maybeHttpStatus);
    }
    catch (error) {
        return UNKNOWN_STATUS_CODE_TEST;
    }
};
const buildError = ({ message, extraProperties = {}, }) => {
    const error = new Error(message);
    forOwn(extraProperties, (value, key) => {
        if (value !== undefined) {
            error[key] = value;
        }
    });
    return error;
};
const isClientError = (code) => code >= 400 && code < 500;
const isValidationError = (ambassadorHTTPError) => has(ambassadorHTTPError, 'response.details.validationError');
const isApplicationError = (ambassadorHTTPError) => {
    const isStatusOfClientError = isClientError(ambassadorHTTPError?.httpStatus);
    return (has(ambassadorHTTPError, 'response.details.applicationError') ||
        isStatusOfClientError);
};
const buildErrorMetadata = (errorType, httpStatusCode) => {
    return { errorType, httpStatusCode };
};
const buildValidationError = (ambassadorHTTPError, transformation, argumentNames) => {
    const { details: { validationError: { fieldViolations }, }, } = ambassadorHTTPError.response;
    const transformedFieldViolations = _(violationsWithRenamedFields({
        transformation,
        fieldViolations,
        argumentNames,
    }))
        .sortBy('field')
        .value();
    const message = `INVALID_ARGUMENT: ${transformedFieldViolations
        .map(({ field, description }) => field ? `"${field}" ${description}` : `${description}`)
        .join(', ')}`;
    const details = {
        validationError: { fieldViolations: transformedFieldViolations },
    };
    const metadata = buildErrorMetadata(ErrorType.User, ambassadorHTTPError.httpStatus);
    return buildError({
        message: toYamlString({ message, details }),
        extraProperties: { details, metadata },
    });
};
const buildApplicationError = (ambassadorHTTPError) => {
    const statusText = ambassadorSafeStatusText(ambassadorHTTPError.httpStatus);
    const hasEmptyDetails = isEqual(get(ambassadorHTTPError, 'response.details', {}), {});
    const metadata = buildErrorMetadata(ErrorType.User, ambassadorHTTPError.httpStatus);
    if (hasEmptyDetails) {
        const details = {
            applicationError: {
                description: statusText,
                code: constantCase(statusText),
                data: {},
            },
        };
        return buildError({
            message: toYamlString({
                message: get(ambassadorHTTPError, 'response.message', statusText),
                details,
            }),
            extraProperties: { details, metadata },
        });
    }
    const message = get(ambassadorHTTPError, 'response.message', statusText);
    const description = get(ambassadorHTTPError, 'response.details.applicationError.description', statusText);
    const code = get(ambassadorHTTPError, 'response.details.applicationError.code', constantCase(statusText));
    const data = get(ambassadorHTTPError, 'response.details.applicationError.data', {});
    const combinedMessage = message === description ? message : `${message}: ${description}`;
    const details = {
        applicationError: {
            description,
            code,
            data,
        },
    };
    return buildError({
        message: toYamlString({ message: combinedMessage, details }),
        extraProperties: { details, metadata },
    });
};
const buildSystemError = (ambassadorHTTPError) => {
    const code = constantCase(ambassadorSafeStatusText(ambassadorHTTPError.httpStatus));
    const message = ambassadorHTTPError.requestId
        ? `System error occurred, request-id: ${ambassadorHTTPError.requestId}`
        : 'System error occurred';
    const metadata = buildErrorMetadata(ErrorType.System, ambassadorHTTPError.httpStatus);
    return buildError({
        message,
        extraProperties: {
            requestId: ambassadorHTTPError.requestId,
            code,
            metadata,
            ...(ambassadorHTTPError.runtimeError && {
                runtimeError: ambassadorHTTPError.runtimeError,
            }),
        },
    });
};
// See https://github.com/wix-private/ambassador/blob/master/src/runtime/http.ts#L10
const transformError = (ambassadorHTTPError, transformation = undefined, argumentNames = undefined) => {
    switch (true) {
        case isValidationError(ambassadorHTTPError):
            return buildValidationError(ambassadorHTTPError, transformation, argumentNames);
        case isApplicationError(ambassadorHTTPError):
            return buildApplicationError(ambassadorHTTPError);
        default:
            return buildSystemError(ambassadorHTTPError);
    }
};
export { transformError };
//# sourceMappingURL=index.js.map