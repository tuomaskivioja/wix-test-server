import { isEmpty, isPlainObject, transform } from 'lodash';
const isEmptyObject = (maybeObject) => isPlainObject(maybeObject) && isEmpty(maybeObject);
const isNonEmptyObject = (maybeObject) => isPlainObject(maybeObject) && !isEmpty(maybeObject);
const isDefinedNonObject = (value) => value !== undefined && !isPlainObject(value);
const omitUndefinedValuesRecursive = (maybeObject) => transform(maybeObject, (acc, value, key) => {
    if (isDefinedNonObject(value) || isEmptyObject(value)) {
        // @ts-expect-error
        acc[key] = value;
    }
    else {
        const withoutUndefinedValues = omitUndefinedValuesRecursive(value);
        if (isNonEmptyObject(withoutUndefinedValues)) {
            // @ts-expect-error
            acc[key] = withoutUndefinedValues;
        }
    }
    return acc;
});
const omitUndefinedValues = (obj) => omitUndefinedValuesRecursive(obj);
export { omitUndefinedValues };
//# sourceMappingURL=omitUndefinedValues.js.map