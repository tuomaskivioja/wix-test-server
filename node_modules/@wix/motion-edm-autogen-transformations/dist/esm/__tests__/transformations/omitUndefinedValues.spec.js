import { aBoolean, aNumber, aString } from '@wix/motion-runtime-test-context';
import { times } from 'lodash';
import { omitUndefinedValues } from '../..';
describe('omitUndefinedValues', () => {
    const valueToKeep = aString();
    const [propertyToRemove1, propertyToRemove2, propertyToKeep1, propertyToKeep2,] = times(4, () => aString());
    test('removes keys with undefined values', () => {
        const result = omitUndefinedValues({
            [propertyToRemove1]: undefined,
            [propertyToKeep1]: valueToKeep,
        });
        expect(result).toStrictEqual({ [propertyToKeep1]: valueToKeep });
    });
    test('removes objects with all undefined keys', () => {
        const result = omitUndefinedValues({
            [propertyToRemove1]: {
                [propertyToRemove1]: undefined,
                [propertyToRemove2]: undefined,
            },
            [propertyToKeep1]: valueToKeep,
        });
        expect(result).toStrictEqual({ [propertyToKeep1]: valueToKeep });
    });
    test('removes nested objects recursively', () => {
        expect(omitUndefinedValues({
            [propertyToKeep1]: {
                [propertyToRemove1]: {
                    [propertyToRemove1]: { [propertyToRemove1]: undefined },
                    [propertyToRemove2]: undefined,
                },
                [propertyToKeep1]: valueToKeep,
            },
        })).toStrictEqual({ [propertyToKeep1]: { [propertyToKeep1]: valueToKeep } });
    });
    test('does not remove empty object with no keys', () => {
        expect(omitUndefinedValues({
            [propertyToKeep1]: {
                [propertyToKeep1]: {
                    [propertyToRemove1]: { [propertyToRemove1]: undefined },
                    [propertyToKeep1]: {},
                },
                [propertyToKeep2]: valueToKeep,
            },
        })).toStrictEqual({
            [propertyToKeep1]: {
                [propertyToKeep1]: {
                    [propertyToKeep1]: {},
                },
                [propertyToKeep2]: valueToKeep,
            },
        });
    });
    test.each `
    value         | description
    ${null}       | ${'null'}
    ${aNumber()}  | ${'a number'}
    ${aBoolean()} | ${'a boolean'}
    ${[]}         | ${'an empty array'}
  `('does not remove $description', ({ value }) => {
        expect(omitUndefinedValues({
            [propertyToKeep1]: {
                [propertyToKeep1]: {
                    [propertyToRemove1]: { [propertyToRemove1]: undefined },
                    [propertyToKeep1]: value,
                },
            },
        })).toStrictEqual({
            [propertyToKeep1]: {
                [propertyToKeep1]: {
                    [propertyToKeep1]: value,
                },
            },
        });
    });
});
//# sourceMappingURL=omitUndefinedValues.spec.js.map