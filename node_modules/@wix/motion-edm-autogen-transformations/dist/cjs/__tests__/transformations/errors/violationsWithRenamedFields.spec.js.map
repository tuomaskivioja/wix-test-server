{"version":3,"names":["_motionRuntimeTestContext","require","_lodash","_violationsWithRenamedFields","describe","argumentNames","times","aString","propertyName","description","originalPath","fieldViolations","field","test","transformation","expect","violationsWithRenamedFields","toStrictEqual","set","overlappingFieldViolations","something","displayName","key","fieldName","path","wrapper","subField","wrappedFieldViolations","undefined","some","nested","anObject"],"sources":["../../../../../src/__tests__/transformations/errors/violationsWithRenamedFields.spec.ts"],"sourcesContent":["import { anObject, aString } from '@wix/motion-runtime-test-context';\nimport { set, times } from 'lodash';\n\nimport { violationsWithRenamedFields } from '../../../lib/transformations/transformError/violationsWithRenamedFields';\n\ndescribe('violationsWithRenamedFields', () => {\n  const argumentNames = times(3, () => aString());\n  const propertyName = aString();\n  const description = aString();\n  const originalPath = `some.nested.path.${propertyName}`;\n  const fieldViolations = [{ field: originalPath, description }];\n\n  describe('identity transformation', () => {\n    test('prepends the path with the single argument name', () => {\n      const transformation = '$[0]';\n\n      expect(\n        violationsWithRenamedFields({\n          transformation,\n          fieldViolations,\n          argumentNames,\n        }),\n      ).toStrictEqual([\n        {\n          field: `${argumentNames[0]}.${originalPath}`,\n          description,\n        },\n      ]);\n    });\n  });\n\n  describe('complex transformation', () => {\n    test('replaces an argument reference with its name in a given field-path', () => {\n      const transformation = set({}, originalPath, '$[1].another.field');\n\n      expect(\n        violationsWithRenamedFields({\n          transformation,\n          fieldViolations,\n          argumentNames,\n        }),\n      ).toStrictEqual([\n        {\n          field: `${argumentNames[1]}.another.field`,\n          description,\n        },\n      ]);\n    });\n\n    test('ignores violations with a path overlapping another violation with a more specific path', () => {\n      const overlappingFieldViolations = [\n        {\n          field: 'something',\n          description: 'is invalid',\n        },\n        {\n          field: 'something.displayName',\n          description,\n        },\n      ];\n\n      const transformation = {\n        something: { displayName: '$[1]', key: '$[0]' },\n      };\n\n      expect(\n        violationsWithRenamedFields({\n          transformation,\n          fieldViolations: overlappingFieldViolations,\n          argumentNames,\n        }),\n      ).toStrictEqual([{ field: argumentNames[1], description }]);\n    });\n\n    test('handles the #wrap custom function', () => {\n      const fieldName = 'emails';\n      const path = `info.${fieldName}`;\n      const wrapper = 'items';\n      const subField = aString();\n      const wrappedFieldViolations = [\n        { field: `${path}.${wrapper}[0].${subField}`, description },\n      ];\n\n      const transformation = set(\n        {},\n        path,\n        `#wrap($[0].${fieldName}, ${wrapper})`,\n      );\n\n      expect(\n        violationsWithRenamedFields({\n          transformation,\n          fieldViolations: wrappedFieldViolations,\n          argumentNames,\n        }),\n      ).toStrictEqual([\n        {\n          field: `${argumentNames[0]}.${fieldName}[0].${subField}`,\n          description,\n        },\n      ]);\n    });\n\n    test('strip field name for invalid input (query builder case)', () => {\n      const transformation = { '*': '$[1]', [originalPath]: '$[0]' };\n\n      expect(\n        violationsWithRenamedFields({\n          transformation,\n          fieldViolations,\n          argumentNames: undefined,\n        }),\n      ).toStrictEqual([\n        {\n          description,\n        },\n      ]);\n    });\n\n    // TODO: this assumes that the value against \"*\" is always a string referencing an argument.\n    // This needs to be added to the transformation validation-rules\n    describe('when a direct match could not be found', () => {\n      test('attempts to match with spread-notation path, using the deepest possible match', () => {\n        const transformation = {\n          some: {\n            nested: { '*': '$[2]', path: { '*': '$[1].another.object' } },\n          },\n        };\n\n        expect(\n          violationsWithRenamedFields({\n            transformation,\n            fieldViolations,\n            argumentNames,\n          }),\n        ).toStrictEqual([\n          {\n            field: `${argumentNames[1]}.another.object.${propertyName}`,\n            description,\n          },\n        ]);\n      });\n\n      test('returns the the path unchanged in case no match was found', () => {\n        const transformation = anObject();\n\n        expect(\n          violationsWithRenamedFields({\n            transformation,\n            fieldViolations,\n            argumentNames,\n          }),\n        ).toStrictEqual(fieldViolations);\n      });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}