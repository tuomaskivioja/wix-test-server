"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addListener = addListener;
exports.removeListener = removeListener;
exports.loadFrame = loadFrame;
exports.addPostMessageListener = addPostMessageListener;
function addListener(eventTarget, name, fn) {
    if (eventTarget.addEventListener) {
        eventTarget.addEventListener(name, fn);
    }
    else {
        eventTarget.attachEvent('on' + name, fn);
    }
}
function removeListener(eventTarget, name, fn) {
    if (eventTarget.removeEventListener) {
        eventTarget.removeEventListener(name, fn);
    }
    else {
        eventTarget.detachEvent('on' + name, fn);
    }
}
function loadFrame(src) {
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.src = src;
    return document.body.appendChild(iframe);
}
function addPostMessageListener(state) {
    let responseHandler;
    let timeoutId;
    const msgReceivedOrTimeout = new Promise((resolve, reject) => {
        responseHandler = (e) => {
            if (!e.data || e.data.state !== state) {
                // A message not meant for us
                return;
            }
            resolve(e.data);
        };
        addListener(window, 'message', responseHandler);
        timeoutId = setTimeout(() => {
            reject(new Error('OAuth flow timed out'));
        }, 120000);
    });
    return msgReceivedOrTimeout.finally(() => {
        clearTimeout(timeoutId);
        removeListener(window, 'message', responseHandler);
    });
}
