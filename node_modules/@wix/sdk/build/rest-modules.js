import { biHeaderGenerator } from './bi/biHeaderGenerator.js';
import { DEFAULT_API_URL } from './common.js';
import { runWithoutContext } from '@wix/sdk-runtime/context';
export function buildRESTDescriptor(origFunc, publicMetadata, boundFetch, wixAPIFetch, getActiveToken, options, hostName) {
    return runWithoutContext(() => origFunc({
        request: async (factory) => {
            const requestOptions = factory({
                host: options?.HTTPHost || DEFAULT_API_URL,
            });
            let request = requestOptions;
            if (request.method === 'GET' &&
                request.fallback?.length &&
                request.params.toString().length > 4000) {
                request = requestOptions.fallback[0];
            }
            const domain = options?.HTTPHost ?? DEFAULT_API_URL;
            let url = `https://${domain}${request.url}`;
            if (request.params && request.params.toString()) {
                url += `?${request.params.toString()}`;
            }
            try {
                const biHeader = biHeaderGenerator(requestOptions, publicMetadata, hostName);
                const res = await boundFetch(url, {
                    method: request.method,
                    ...(request.data && {
                        body: JSON.stringify(request.data),
                    }),
                    headers: {
                        ...biHeader,
                    },
                });
                if (res.status !== 200) {
                    let dataError = null;
                    try {
                        dataError = await res.json();
                    }
                    catch (e) {
                        //
                    }
                    throw errorBuilder(res.status, dataError?.message, dataError?.details, {
                        requestId: res.headers.get('X-Wix-Request-Id'),
                        details: dataError,
                    });
                }
                const data = await res.json();
                return {
                    data,
                    headers: res.headers,
                    status: res.status,
                    statusText: res.statusText,
                };
            }
            catch (e) {
                if (e.message?.includes('fetch is not defined')) {
                    console.error('Node.js v18+ is required');
                }
                throw e;
            }
        },
        fetchWithAuth: boundFetch,
        wixAPIFetch,
        getActiveToken,
    }));
}
const errorBuilder = (code, description, details, data) => {
    return {
        response: {
            data: {
                details: {
                    ...(!details?.validationError && {
                        applicationError: {
                            description,
                            code,
                            data,
                        },
                    }),
                    ...details,
                },
                message: description,
            },
            status: code,
        },
    };
};
