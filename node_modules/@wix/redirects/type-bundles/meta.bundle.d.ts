/** Information for redirecting a visitor from an external Wix Headless client site to a Wix page for Wix-managed functionality. */
interface RedirectSession$1 {
    /** ID of the redirect session created. */
    id?: string;
    /**
     * The full URL of the Wix page to redirect the visitor to. This URL includes query parameters informing Wix where to redirect the visitor back to on the Wix Headless client site.
     * @readonly
     */
    fullUrl?: string;
    /** Details about the URL of the RedirectSession */
    urlDetails?: URLDetails$1;
    /**
     * The session token to pass to the Wix page to maintain the visitor's identity.
     * @readonly
     */
    sessionToken?: string | null;
    /**
     * The short URL of the Wix page to redirect the visitor to. This URL includes query parameters informing Wix where to redirect the visitor back to on the Wix Headless client site.
     * @readonly
     */
    shortUrl?: string;
}
interface URLDetails$1 {
    /**
     * The endpoint of the url (includes the base url and the path to the endpoint, without the query parameters)
     * For example: `https://mysite.com/_api/oauth2/authorize`
     * @readonly
     */
    endpoint?: string;
    /** The query parameters of the url */
    searchParams?: Record<string, string>;
}
interface CreateRedirectSessionRequest$1 extends CreateRedirectSessionRequestIntentOneOf$1 {
    /** Information required for generating a custom URL for a Wix Bookings checkout. */
    bookingsCheckout?: RedirectSessionBookingsCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix eCommerce checkout. */
    ecomCheckout?: RedirectSessionEcomCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix Events checkout. */
    eventsCheckout?: RedirectSessionEventsCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix Paid Plans checkout. */
    paidPlansCheckout?: RedirectSessionPaidPlansCheckoutParams$1;
    /** Pass an empty object in this parameter to generate a URL for Wix login without first checking whether the visitor is authenticated. */
    login?: RedirectSessionLoginParams$1;
    /** Information required for generating a custom URL to log out from a Wix account. This process invalidates the visitor or member token and clears cookies associated with the Wix domain from their browser. */
    logout?: RedirectSessionLogoutParams$1;
    /** Information required for generating a custom URL for Wix authentication. */
    auth?: RedirectSessionAuthParams$1;
    /** Information required for generating a custom URL for a Wix stores product page. */
    storesProduct?: RedirectSessionStoresProductParams$1;
    /** Information required for generating a custom URL for Wix bookings book page. */
    bookingsBook?: RedirectSessionBookingsBookParams$1;
    /**
     * Details of pages to redirect the visitor back to on the Wix Headless client site.
     * When redirecting to any callback URL, Wix passes the boolean `wixMemberLoggedIn` query parameter.
     * If `true`, a member logged in during the preceding Wix-managed process.
     *
     * **Note**: For an authentication redirect, don't pass a post-flow URL here. Instead, pass one in `auth.authRequest.redirectUri`.
     */
    callbacks?: CallbackParams$1;
    /** Optional preferences for customizing redirection to Wix pages. */
    preferences?: RedirectSessionPreferences$1;
}
/** @oneof */
interface CreateRedirectSessionRequestIntentOneOf$1 {
    /** Information required for generating a custom URL for a Wix Bookings checkout. */
    bookingsCheckout?: RedirectSessionBookingsCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix eCommerce checkout. */
    ecomCheckout?: RedirectSessionEcomCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix Events checkout. */
    eventsCheckout?: RedirectSessionEventsCheckoutParams$1;
    /** Information required for generating a custom URL for a Wix Paid Plans checkout. */
    paidPlansCheckout?: RedirectSessionPaidPlansCheckoutParams$1;
    /** Pass an empty object in this parameter to generate a URL for Wix login without first checking whether the visitor is authenticated. */
    login?: RedirectSessionLoginParams$1;
    /** Information required for generating a custom URL to log out from a Wix account. This process invalidates the visitor or member token and clears cookies associated with the Wix domain from their browser. */
    logout?: RedirectSessionLogoutParams$1;
    /** Information required for generating a custom URL for Wix authentication. */
    auth?: RedirectSessionAuthParams$1;
    /** Information required for generating a custom URL for a Wix stores product page. */
    storesProduct?: RedirectSessionStoresProductParams$1;
    /** Information required for generating a custom URL for Wix bookings book page. */
    bookingsBook?: RedirectSessionBookingsBookParams$1;
}
interface RedirectSessionBookingsCheckoutParams$1 {
    /**
     * The timezone to use when presenting the selected slot to users, in [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format. For example, `America/Santiago`.
     *
     * Default: If you don't specify a timezone, the timezone in `slotAvailability.slot.timezone` is used.
     */
    timezone?: string;
    /** *Required.** The calendar slot to check out. */
    slotAvailability?: SlotAvailability$1;
}
interface SlotAvailability$1 {
    /**
     * The slot for the corresponding session, when the session is either a single session
     * or a specific session generated from a recurring session.
     */
    slot?: Slot$1;
    /**
     * Whether the slot is bookable. Bookability is determined by checking a
     * session's open slots and booking policies. Locks are not taken into
     * account.
     */
    bookable?: boolean;
    /**
     * Total number of spots for this slot.
     * For example, if a session has a total of 10 spots and 3 spots are booked,
     * `spotsTotal` is 10 and `openSpots` is 7.
     */
    totalSpots?: number | null;
    /** Number of open spots for this slot. */
    openSpots?: number | null;
    /** An object describing the slot's waitlist and its occupancy. */
    waitingList?: WaitingList$1;
    /** Booking policy violations for the slot. */
    bookingPolicyViolations?: BookingPolicyViolations$1;
    /**
     * Indicates whether the slot is locked because a waitlist exists.
     * When a slot frees up, the slot is offered to the next customer on the waitlist. Read-only.
     */
    locked?: boolean | null;
    isFromV2?: boolean;
}
interface Slot$1 {
    /**
     * ID for the slot's corresponding session, when the session is either a single session
     * or a specific session generated from a recurring session.
     */
    sessionId?: string | null;
    /** Service ID. */
    serviceId?: string;
    /** Schedule ID. */
    scheduleId?: string;
    /**
     * The start time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     *
     * If `timezone` is specified,
     * dates are based on the local date/time. This means that the timezone offset
     * in the `start_date` is ignored.
     */
    startDate?: string | null;
    /**
     * The end time of this slot in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     *
     * If `timezone` is specified,
     * dates are based on the local date/time. This means that the timezone offset
     * in the `end_date` is ignored.
     */
    endDate?: string | null;
    /**
     * The timezone for which slot availability is to be calculated.
     *
     * Learn more about [handling Daylight Savings Time (DST) for local time zones](https://dev.wix.com/api/rest/wix-bookings/availability-calendar/query-availability#wix-bookings_availability-calendar_query-availability_handling-daylight-savings-time-dst-for-local-time-zones)
     * when calculating availability.
     */
    timezone?: string | null;
    /**
     * The resource required for this slot. Currently, the only supported resource
     * is the relevant staff member for the slot.
     */
    resource?: SlotResource$1;
    /** Geographic location of the slot. */
    location?: Location$1;
}
interface SlotResource$1 {
    /**
     * Resource ID.
     * @readonly
     */
    id?: string | null;
    /** Resource name. Read only. */
    name?: string | null;
}
interface Location$1 {
    /**
     * Business location ID. Available only for locations that are business locations,
     * meaning the `location_type` is `"OWNER_BUSINESS"`.
     */
    id?: string | null;
    /** Location name. */
    name?: string | null;
    /** The full address of this location. */
    formattedAddress?: string | null;
    /**
     * Location type.
     *
     * - `"OWNER_BUSINESS"`: The business address, as set in the siteâ€™s general settings.
     * - `"OWNER_CUSTOM"`: The address as set when creating the service.
     * - `"CUSTOM"`: The address as set for the individual session.
     */
    locationType?: LocationType$1;
}
declare enum LocationType$1 {
    UNDEFINED = "UNDEFINED",
    OWNER_BUSINESS = "OWNER_BUSINESS",
    OWNER_CUSTOM = "OWNER_CUSTOM",
    CUSTOM = "CUSTOM"
}
interface WaitingList$1 {
    /**
     * Total number of spots and open spots for this waitlist.
     * For example, a Yoga class with 10 waitlist spots and 3 registered
     * on the waitlist has 10 `total_spots` and 7 `open_spots`.
     */
    totalSpots?: number | null;
    /** Number of open spots for this waitlist. */
    openSpots?: number | null;
}
interface BookingPolicyViolations$1 {
    /** Bookings policy violation. Too early to book this slot. */
    tooEarlyToBook?: boolean | null;
    /** Bookings policy violation. Too late to book this slot. */
    tooLateToBook?: boolean | null;
    /** Bookings policy violation. Online booking is disabled for this slot. */
    bookOnlineDisabled?: boolean | null;
}
interface RedirectSessionEcomCheckoutParams$1 {
    /** *Required.** ID of the checkout to process. Use [Create Checkout From Cart](https://dev.wix.com/api/rest/wix-ecommerce/cart/create-checkout-from-cart) to create a checkout and obtain an ID. */
    checkoutId?: string;
}
interface RedirectSessionEventsCheckoutParams$1 {
    /** *Required.** ID of the temporary event reservation. Use [Create Reservation](https://dev.wix.com/api/rest/wix-events/wix-events/checkout/create-reservation) to reserve a ticket temporarily and obtain a reservation ID. */
    reservationId?: string;
    /** *Required.** URL-friendly event slug, generated from the event title of the event. For example, `my-event-4`. Use [Query Events](https://dev.wix.com/api/rest/wix-events/wix-events/event/query-events) to obtain an event slug. */
    eventSlug?: string;
}
interface RedirectSessionPaidPlansCheckoutParams$1 {
    /** *Required.** ID of the paid plan selected. Use [Query Public Plans](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/query-public-plans) to obtain a paid plan ID. */
    planId?: string;
    /**
     * For use when pricing plan selection is part of a checkout flow, only if the paid plan selection page is implemented on an external Wix Headless client site.
     * In this case, a string is received by the external pricing plans page as a `checkoutData` query parameter. Pass this string back here when redirecting back to Wix for checkout.
     */
    checkoutData?: string | null;
}
interface RedirectSessionLoginParams$1 {
}
interface RedirectSessionLogoutParams$1 {
    /** *Required.** ID of the OAuth app authorizing the client. */
    clientId?: string;
}
interface RedirectSessionAuthParams$1 {
    /** *Required.** The authorization request to send to the authorization server. */
    authRequest?: AuthorizeRequest$1;
    prompt?: Prompt$1;
}
/**
 * AuthorizeRequest is sent by the client to the authorization server to initiate
 * the authorization process.
 */
interface AuthorizeRequest$1 {
    /** ID of the Wix OAuth app requesting authorization. */
    clientId?: string;
    /**
     * Desired authorization [grant type](https://auth0.com/docs/authenticate/protocols/oauth#grant-types).
     *
     * Supported values:
     * + `code`: The endpoint returns an authorization code that can be used to obtain an access token.
     */
    responseType?: string;
    /** URI to redirect the browser to after authentication and authorization. The browser is redirected to this URI whether the authentication and authorization process is successful or not. */
    redirectUri?: string | null;
    /**
     * Desired scope of access. If this field is left empty, only an access token is granted.
     * To received a refresh token, pass `offline_access` as the value of this field.
     */
    scope?: string | null;
    /**
     * A value used to confirm the state of an application before and after it makes an authorization
     * request. If a value for this field is set in the request, it's added to the `redirectUri` when the browser
     * is redirected there.
     * Learn more about [using the state parameter](https://auth0.com/docs/secure/attack-protection/state-parameters).
     */
    state?: string;
    /**
     * esired response format.
     *
     * Supported values:
     * + `query`: The response parameters are encoded as query string parameters and added to the `redirectUri` when redirecting.
     * + `fragment`: The response parameters are encoded as URI fragment parameters and added to the `redirectUri` when redirecting.
     * + `web_message`: The response parameters are encoded as a JSON object and added to the body of a [web message response](https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00).
     *
     * Default value: `query`
     */
    responseMode?: string | null;
    /**
     * Code challenge to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     */
    codeChallenge?: string | null;
    /**
     * Code challenge method to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     *
     * Supported values:
     * + `S256`: The code challenge is transformed using SHA-256 encyption.
     * + `S512`: The code challenge is transformed using SHA-512 encyption.
     */
    codeChallengeMethod?: string | null;
    /** Session token of the site visitor to authorize. */
    sessionToken?: string | null;
}
/** Currently only `none` and `login` are supported. */
declare enum Prompt$1 {
    login = "login",
    none = "none",
    consent = "consent",
    select_account = "select_account"
}
interface RedirectSessionStoresProductParams$1 {
    /** *Required.** Slug of the product to navigate to. */
    productSlug?: string;
}
interface RedirectSessionBookingsBookParams$1 {
    /** For use when filtering the bookings page by a specific resource. */
    resourceId?: string;
}
interface CallbackParams$1 {
    /**
     * The URL for a custom thank you page implemented on a site outside of Wix. The visitor is directed to this page after the Wix-managed process is completed.
     * When redirecting to this URL, Wix passes different query parameters depending on the preceding transaction:
     *
     * After a pricing plans checkout:
     * + `planOrderId`: ID of a pricing plan order.
     *
     * After an eCommerce checkout:
     * + `orderId`: ID of an eCommerce order.
     *
     * After an Events checkout
     * + `orderNumber`: Unique order number for the transaction.
     * + `eventId`: ID of the event.
     *
     * If the process is abandoned or interrupted, the visitor is redirected to the URL specified in `postFlowUrl` instead.
     *
     * Default: If you don't pass a URL, the visitor is redirected to a Wix thank you page, and from there to the URL specified in `postFlowUrl`.
     */
    thankYouPageUrl?: string | null;
    /**
     * The URL Wix should redirect the visitor to when the Wix-managed process is completed, abandoned, or interrupted.
     *
     * **Note**: For an authentication redirect, don't pass a URL here. Instead, pass one in `auth.authRequest.redirectUri`.
     */
    postFlowUrl?: string | null;
    /**
     * The URL for a custom login page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix login page is used.
     */
    loginUrl?: string | null;
    /**
     * The URL for a custom bookings services page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix bookings services page is used.
     */
    bookingsServiceListUrl?: string | null;
    /**
     * The URL for a custom eCommerce cart page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix cart page is used.
     */
    cartPageUrl?: string | null;
    /**
     * The URL for a custom pricing plans page implemented outside of Wix.
     * When redirecting to this URL, Wix passes the following query parameters:
     * + `planIds`:  IDs of the pricing plans on the custom page.
     * + `checkoutData`: Pass this string back in `paidPlansCheckout.checkoutData` when redirecting back to Wix for checkout.
     *
     * Default: If you don't pass a URL, a Wix pricing plans page is used.
     */
    planListUrl?: string | null;
}
interface RedirectSessionPreferences$1 {
    /**
     * Whether to use a standard Wix template for Wix-managed pages the visitor is redirected to. Set to `false` only if your client site connects with a Wix site that has custom pages.
     *
     * Default: `true`
     */
    useGenericWixPages?: boolean | null;
    /**
     * Whether to maintain the identity used in the redirect to wix (not relevant for "logout" and "auth" intents), or to use a new visitor identity.
     *
     * Default: `true`
     */
    maintainIdentity?: boolean | null;
    /**
     * A map of additional query parameters to pass to the created Wix URL.
     * Global query parameters to be passed to Wix, for example campaign parameters (UTM params).
     */
    additionalQueryParameters?: Record<string, string>;
}
interface CreateRedirectSessionResponse$1 {
    /** Details for redirecting the visitor to a Wix page. */
    redirectSession?: RedirectSession$1;
}
interface URLDetailsNonNullableFields$1 {
    endpoint: string;
}
interface RedirectSessionNonNullableFields$1 {
    id: string;
    fullUrl: string;
    urlDetails?: URLDetailsNonNullableFields$1;
    shortUrl: string;
}
interface CreateRedirectSessionResponseNonNullableFields$1 {
    redirectSession?: RedirectSessionNonNullableFields$1;
}

/** Information for redirecting a visitor from an external Wix Headless client site to a Wix page for Wix-managed functionality. */
interface RedirectSession {
    /** ID of the redirect session created. */
    _id?: string;
    /**
     * The full URL of the Wix page to redirect the visitor to. This URL includes query parameters informing Wix where to redirect the visitor back to on the Wix Headless client site.
     * @readonly
     */
    fullUrl?: string;
    /** Details about the URL of the RedirectSession */
    urlDetails?: URLDetails;
    /**
     * The session token to pass to the Wix page to maintain the visitor's identity.
     * @readonly
     */
    sessionToken?: string | null;
    /**
     * The short URL of the Wix page to redirect the visitor to. This URL includes query parameters informing Wix where to redirect the visitor back to on the Wix Headless client site.
     * @readonly
     */
    shortUrl?: string;
}
interface URLDetails {
    /**
     * The endpoint of the url (includes the base url and the path to the endpoint, without the query parameters)
     * For example: `https://mysite.com/_api/oauth2/authorize`
     * @readonly
     */
    endpoint?: string;
    /** The query parameters of the url */
    searchParams?: Record<string, string>;
}
interface CreateRedirectSessionRequest extends CreateRedirectSessionRequestIntentOneOf {
    /** Information required for generating a custom URL for a Wix Bookings checkout. */
    bookingsCheckout?: RedirectSessionBookingsCheckoutParams;
    /** Information required for generating a custom URL for a Wix eCommerce checkout. */
    ecomCheckout?: RedirectSessionEcomCheckoutParams;
    /** Information required for generating a custom URL for a Wix Events checkout. */
    eventsCheckout?: RedirectSessionEventsCheckoutParams;
    /** Information required for generating a custom URL for a Wix Paid Plans checkout. */
    paidPlansCheckout?: RedirectSessionPaidPlansCheckoutParams;
    /** Pass an empty object in this parameter to generate a URL for Wix login without first checking whether the visitor is authenticated. */
    login?: RedirectSessionLoginParams;
    /** Information required for generating a custom URL to log out from a Wix account. This process invalidates the visitor or member token and clears cookies associated with the Wix domain from their browser. */
    logout?: RedirectSessionLogoutParams;
    /** Information required for generating a custom URL for Wix authentication. */
    auth?: RedirectSessionAuthParams;
    /** Information required for generating a custom URL for a Wix stores product page. */
    storesProduct?: RedirectSessionStoresProductParams;
    /** Information required for generating a custom URL for Wix bookings book page. */
    bookingsBook?: RedirectSessionBookingsBookParams;
    /**
     * Details of pages to redirect the visitor back to on the Wix Headless client site.
     *
     * **Note**: For an authentication redirect, don't pass a post-flow URL here. Instead, pass one in `options.auth.authRequest.redirectUri`.
     */
    callbacks?: CallbackParams;
    /** Optional preferences for customizing redirection to Wix pages. */
    preferences?: RedirectSessionPreferences;
}
/** @oneof */
interface CreateRedirectSessionRequestIntentOneOf {
    /** Information required for generating a custom URL for a Wix Bookings checkout. */
    bookingsCheckout?: RedirectSessionBookingsCheckoutParams;
    /** Information required for generating a custom URL for a Wix eCommerce checkout. */
    ecomCheckout?: RedirectSessionEcomCheckoutParams;
    /** Information required for generating a custom URL for a Wix Events checkout. */
    eventsCheckout?: RedirectSessionEventsCheckoutParams;
    /** Information required for generating a custom URL for a Wix Paid Plans checkout. */
    paidPlansCheckout?: RedirectSessionPaidPlansCheckoutParams;
    /** Pass an empty object in this parameter to generate a URL for Wix login without first checking whether the visitor is authenticated. */
    login?: RedirectSessionLoginParams;
    /** Information required for generating a custom URL to log out from a Wix account. This process invalidates the visitor or member token and clears cookies associated with the Wix domain from their browser. */
    logout?: RedirectSessionLogoutParams;
    /** Information required for generating a custom URL for Wix authentication. */
    auth?: RedirectSessionAuthParams;
    /** Information required for generating a custom URL for a Wix stores product page. */
    storesProduct?: RedirectSessionStoresProductParams;
    /** Information required for generating a custom URL for Wix bookings book page. */
    bookingsBook?: RedirectSessionBookingsBookParams;
}
interface RedirectSessionBookingsCheckoutParams {
    /**
     * The timezone to use when presenting the selected slot to users, in [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format. For example, `America/Santiago`.
     *
     * Default: If you don't specify a timezone, the timezone in `slotAvailability.slot.timezone` is used.
     */
    timezone?: string;
    /** __Required.__ The calendar slot to check out. */
    slotAvailability?: SlotAvailability;
}
interface SlotAvailability {
    /**
     * The slot for the corresponding session, when the session is either a single session
     * or a specific session generated from a recurring session.
     */
    slot?: Slot;
    /**
     * Whether the slot is bookable. Bookability is determined by checking a
     * session's open slots and booking policies. Locks are not taken into
     * account.
     */
    bookable?: boolean;
    /**
     * Total number of spots for this slot.
     * For example, if a session has a total of 10 spots and 3 spots are booked,
     * `spotsTotal` is 10 and `openSpots` is 7.
     */
    totalSpots?: number | null;
    /** Number of open spots for this slot. */
    openSpots?: number | null;
    /** An object describing the slot's waitlist and its occupancy. */
    waitingList?: WaitingList;
    /** Booking policy violations for the slot. */
    bookingPolicyViolations?: BookingPolicyViolations;
    /**
     * Indicates whether the slot is locked because a waitlist exists.
     * When a slot frees up, the slot is offered to the next customer on the waitlist. Read-only.
     */
    locked?: boolean | null;
    isFromV2?: boolean;
}
interface Slot {
    /**
     * ID for the slot's corresponding session, when the session is either a single session
     * or a specific session generated from a recurring session.
     */
    sessionId?: string | null;
    /** Service ID. */
    serviceId?: string;
    /** Schedule ID. */
    scheduleId?: string;
    /**
     * The start time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     *
     * If `timezone` is specified,
     * dates are based on the local date/time. This means that the timezone offset
     * in the `startDate` is ignored.
     */
    startDate?: string | null;
    /**
     * The end time of this slot in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     *
     * If `timezone` is specified,
     * dates are based on the local date/time. This means that the timezone offset
     * in the `endDate` is ignored.
     */
    endDate?: string | null;
    /**
     * The timezone for which slot availability is to be calculated.
     *
     * Learn more about [handling Daylight Savings Time (DST) for local time zones](https://dev.wix.com/api/sdk/bookings/availabilitycalendar/queryavailability#bookings_availabilitycalendar_queryavailability_handling-daylight-savings-time-dst-for-local-time-zones)
     * when calculating availability.
     */
    timezone?: string | null;
    /**
     * The resource required for this slot. Currently, the only supported resource
     * is the relevant staff member for the slot.
     */
    resource?: SlotResource;
    /** Geographic location of the slot. */
    location?: Location;
}
interface SlotResource {
    /**
     * Resource ID.
     * @readonly
     */
    _id?: string | null;
    /** Resource name. Read only. */
    name?: string | null;
}
interface Location {
    /**
     * Business location ID. Available only for locations that are business locations,
     * meaning the `location_type` is `"OWNER_BUSINESS"`.
     */
    _id?: string | null;
    /** Location name. */
    name?: string | null;
    /** The full address of this location. */
    formattedAddress?: string | null;
    /**
     * Location type.
     *
     * - `"OWNER_BUSINESS"`: The business address, as set in the siteâ€™s general settings.
     * - `"OWNER_CUSTOM"`: The address as set when creating the service.
     * - `"CUSTOM"`: The address as set for the individual session.
     */
    locationType?: LocationType;
}
declare enum LocationType {
    UNDEFINED = "UNDEFINED",
    OWNER_BUSINESS = "OWNER_BUSINESS",
    OWNER_CUSTOM = "OWNER_CUSTOM",
    CUSTOM = "CUSTOM"
}
interface WaitingList {
    /**
     * Total number of spots and open spots for this waitlist.
     * For example, a Yoga class with 10 waitlist spots and 3 registered
     * on the waitlist has 10 `total_spots` and 7 `open_spots`.
     */
    totalSpots?: number | null;
    /** Number of open spots for this waitlist. */
    openSpots?: number | null;
}
interface BookingPolicyViolations {
    /** Bookings policy violation. Too early to book this slot. */
    tooEarlyToBook?: boolean | null;
    /** Bookings policy violation. Too late to book this slot. */
    tooLateToBook?: boolean | null;
    /** Bookings policy violation. Online booking is disabled for this slot. */
    bookOnlineDisabled?: boolean | null;
}
interface RedirectSessionEcomCheckoutParams {
    /** __Required.__ ID of the checkout to process. Use [`createCheckout()`](https://dev.wix.com/api/sdk/ecom/checkout/createcheckout) or [`createCheckoutFromCurrentCart()`](https://dev.wix.com/api/sdk/ecom/currentcart/createcheckoutfromcurrentcart) to create a checkout and obtain an ID. */
    checkoutId?: string;
}
interface RedirectSessionEventsCheckoutParams {
    /** __Required.__ ID of the temporary event reservation. Use [`createReservation()`](https://dev.wix.com/api/sdk/events/checkout/createreservation) to reserve a ticket temporarily and obtain a reservation ID. */
    reservationId?: string;
    /** __Required.__ URL-friendly event slug, generated from the event title of the event. For example, `my-event-4`. Use [`listEvents()`](https://dev.wix.com/api/sdk/events/wixevents/listevents) to obtain an event slug. */
    eventSlug?: string;
}
interface RedirectSessionPaidPlansCheckoutParams {
    /** __Required.__ ID of the paid plan selected. Use [`queryPublicPlans()`](https://dev.wix.com/api/sdk/pricing-plans/plans/querypublicplans) to obtain a paid plan ID. */
    planId?: string;
    /**
     * For use when pricing plan selection is part of a checkout flow, only if the paid plan selection page is implemented on an external Wix Headless client site.
     * In this case, a string is received by the external pricing plans page as a `checkoutData` query parameter. Pass this string back here when redirecting back to Wix for checkout.
     */
    checkoutData?: string | null;
}
interface RedirectSessionLoginParams {
}
interface RedirectSessionLogoutParams {
    /** __Required.__ ID of the OAuth app authorizing the client. */
    clientId?: string;
}
interface RedirectSessionAuthParams {
    /** __Required.__ The authorization request to send to the authorization server. */
    authRequest?: AuthorizeRequest;
    prompt?: Prompt;
}
/**
 * AuthorizeRequest is sent by the client to the authorization server to initiate
 * the authorization process.
 */
interface AuthorizeRequest {
    /** ID of the Wix OAuth app requesting authorization. */
    clientId?: string;
    /**
     * Desired authorization [grant type](https://auth0.com/docs/authenticate/protocols/oauth#grant-types).
     *
     * Supported values:
     * + `code`: The endpoint returns an authorization code that can be used to obtain an access token.
     */
    responseType?: string;
    /** URI to redirect the browser to after authentication and authorization. The browser is redirected to this URI whether the authentication and authorization process is successful or not. */
    redirectUri?: string | null;
    /**
     * Desired scope of access. If this field is left empty, only an access token is granted.
     * To received a refresh token, pass `offline_access` as the value of this field.
     */
    scope?: string | null;
    /**
     * A value used to confirm the state of an application before and after it makes an authorization
     * request. If a value for this field is set in the request, it's added to the `redirectUri` when the browser
     * is redirected there.
     * Learn more about [using the state parameter](https://auth0.com/docs/secure/attack-protection/state-parameters).
     */
    state?: string;
    /**
     * esired response format.
     *
     * Supported values:
     * + `query`: The response parameters are encoded as query string parameters and added to the `redirectUri` when redirecting.
     * + `fragment`: The response parameters are encoded as URI fragment parameters and added to the `redirectUri` when redirecting.
     * + `web_message`: The response parameters are encoded as a JSON object and added to the body of a [web message response](https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00).
     *
     * Default value: `query`
     */
    responseMode?: string | null;
    /**
     * Code challenge to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     */
    codeChallenge?: string | null;
    /**
     * Code challenge method to use for PKCE verification.
     * This field is only used if `responseType` is set to `code`.
     *
     * Supported values:
     * + `S256`: The code challenge is transformed using SHA-256 encyption.
     * + `S512`: The code challenge is transformed using SHA-512 encyption.
     */
    codeChallengeMethod?: string | null;
    /** Session token of the site visitor to authorize. */
    sessionToken?: string | null;
}
/** Currently only `none` and `login` are supported. */
declare enum Prompt {
    login = "login",
    none = "none",
    consent = "consent",
    select_account = "select_account"
}
interface RedirectSessionStoresProductParams {
    /** *Required.** Slug of the product to navigate to. */
    productSlug?: string;
}
interface RedirectSessionBookingsBookParams {
    /** For use when filtering the bookings page by a specific resource. */
    resourceId?: string;
}
interface CallbackParams {
    /**
     * The URL for a custom thank you page implemented on a site outside of Wix. The visitor is directed to this page after the Wix-managed process is completed.
     * When redirecting to this URL, Wix passes different query parameters depending on the preceding transaction:
     *
     * After a pricing plans checkout:
     * + `planOrderId`: ID of a pricing plan order.
     *
     * After an eCommerce checkout:
     * + `orderId`: ID of an eCommerce order.
     *
     * After an Events checkout
     * + `orderNumber`: Unique order number for the transaction.
     * + `eventId`: ID of the event.
     *
     * If the process is abandoned or interrupted, the visitor is redirected to the URL specified in `postFlowUrl` instead.
     *
     * Default: If you don't pass a URL, the visitor is redirected to a Wix thank you page, and from there to the URL specified in `postFlowUrl`.
     */
    thankYouPageUrl?: string | null;
    /**
     * The URL Wix should redirect the visitor to when the Wix-managed process is completed, abandoned, or interrupted.
     *
     * **Note**: For an authentication redirect, don't pass a URL here. Instead, pass one in `options.auth.authRequest.redirectUri`.
     */
    postFlowUrl?: string | null;
    /**
     * The URL for a custom login page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix login page is used.
     */
    loginUrl?: string | null;
    /**
     * The URL for a custom bookings services page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix bookings services page is used.
     */
    bookingsServiceListUrl?: string | null;
    /**
     * The URL for a custom eCommerce cart page implemented outside of Wix.
     *
     * Default: If you don't pass a URL, a Wix cart page is used.
     */
    cartPageUrl?: string | null;
    /**
     * The URL for a custom pricing plans page implemented outside of Wix. When redirecting to this URL, Wix passes the following query parameters:
     * + `planIds`:  IDs of the pricing plans on the custom page.
     * + `checkoutData`: Pass this string back in `options.paidPlansCheckout.checkoutData` when redirecting back to Wix for checkout.
     *
     *  Default: If you don't pass a URL, a Wix pricing plans page is used.
     */
    planListUrl?: string | null;
}
interface RedirectSessionPreferences {
    /**
     * Whether to use a standard Wix template for Wix-managed pages the visitor is redirected to. Set to `false` only if your client site connects with a Wix site that has custom pages.
     *
     * Default: `true`
     */
    useGenericWixPages?: boolean | null;
    /**
     * Whether to maintain the identity used in the redirect to wix (not relevant for "logout" and "auth" intents), or to use a new visitor identity.
     *
     * Default: `true`
     */
    maintainIdentity?: boolean | null;
    /**
     * A map of additional query parameters to pass to the created Wix URL.
     * Global query parameters to be passed to Wix, for example campaign parameters (UTM params).
     */
    additionalQueryParameters?: Record<string, string>;
}
interface CreateRedirectSessionResponse {
    /** Details for redirecting the visitor to a Wix page. */
    redirectSession?: RedirectSession;
}
interface URLDetailsNonNullableFields {
    endpoint: string;
}
interface RedirectSessionNonNullableFields {
    _id: string;
    fullUrl: string;
    urlDetails?: URLDetailsNonNullableFields;
    shortUrl: string;
}
interface CreateRedirectSessionResponseNonNullableFields {
    redirectSession?: RedirectSessionNonNullableFields;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createRedirectSession(): __PublicMethodMetaInfo<'POST', {}, CreateRedirectSessionRequest, CreateRedirectSessionRequest$1, CreateRedirectSessionResponse & CreateRedirectSessionResponseNonNullableFields, CreateRedirectSessionResponse$1 & CreateRedirectSessionResponseNonNullableFields$1>;

type meta___PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = __PublicMethodMetaInfo<K, M, T, S, Q, R>;
declare const meta_createRedirectSession: typeof createRedirectSession;
declare namespace meta {
  export { type meta___PublicMethodMetaInfo as __PublicMethodMetaInfo, meta_createRedirectSession as createRedirectSession };
}

export { meta as redirects };
