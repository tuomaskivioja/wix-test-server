export type ValidationErrorResponse = {
    details: {
        validationError: {
            fieldViolations: {
                field: string;
                description: string;
            }[];
        };
    };
};
export type ApplicationErrorResponse = {
    message?: string;
    details: {
        applicationError?: {
            description?: string;
            code?: string;
            data?: unknown;
        };
    };
};
export type HTTPClientError<ErrorData = unknown> = {
    response?: {
        data?: ErrorData;
        status?: number;
        statusText?: string;
    };
    requestId?: string;
};
export declare function transformError(httpClientError: unknown, pathsToArguments?: PathsToArguments, argumentNames?: string[]): Error;
type PathsToArguments = {
    spreadPathsToArguments: Record<string, string>;
    explicitPathsToArguments: Record<string, string>;
    singleArgumentUnchanged: boolean;
};
export {};
