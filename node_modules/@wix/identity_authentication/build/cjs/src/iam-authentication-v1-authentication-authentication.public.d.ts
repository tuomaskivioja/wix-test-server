import { HttpClient } from '@wix/sdk-types';
import { Identity, Identifier, LoginId, LoginOptions, LoginV2Options, LoginWithIdpConnectionTokenParamsOptions, LogoutOptions, ProceedToNextStateOptions, RegisterOptions, RegisterV2Options, SignOnOptions } from './iam-authentication-v1-authentication-authentication.universal';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function register(httpClient: HttpClient): (identity: Identity, options?: RegisterOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").LoginResponse & import("./iam-authentication-v1-authentication-authentication.universal").LoginResponseNonNullableFields>;
export declare function login(httpClient: HttpClient): (identifier: Identifier, options?: LoginOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").LoginResponse & import("./iam-authentication-v1-authentication-authentication.universal").LoginResponseNonNullableFields>;
export declare function registerV2(httpClient: HttpClient): (loginId: LoginId, options?: RegisterV2Options) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponse & import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponseNonNullableFields>;
export declare function loginV2(httpClient: HttpClient): (loginId: LoginId, options?: LoginV2Options) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponse & import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponseNonNullableFields>;
export declare function changePassword(httpClient: HttpClient): (newPassword: string) => Promise<void>;
export declare function loginWithIdpConnectionTokenParams(httpClient: HttpClient): (options?: LoginWithIdpConnectionTokenParamsOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponse & import("./iam-authentication-v1-authentication-authentication.universal").StateMachineResponseNonNullableFields>;
export declare function proceedToNextState(httpClient: HttpClient): (options?: ProceedToNextStateOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").LoginResponse & import("./iam-authentication-v1-authentication-authentication.universal").LoginResponseNonNullableFields>;
export declare function signOn(httpClient: HttpClient): (loginId: LoginId, options?: SignOnOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").SignOnResponse & import("./iam-authentication-v1-authentication-authentication.universal").SignOnResponseNonNullableFields>;
export declare function logout(httpClient: HttpClient): (options?: LogoutOptions) => Promise<import("./iam-authentication-v1-authentication-authentication.universal").RawHttpResponse & import("./iam-authentication-v1-authentication-authentication.universal").RawHttpResponseNonNullableFields>;
export { PrivacyStatus, EmailTag, PhoneTag, AddressTag, StatusName, Reason, StateStatus, StateType, TenantType, } from './iam-authentication-v1-authentication-authentication.universal';
export { Authentication, RegisterRequest, Identity, Identifier, IdentifierValueOneOf, Connection, ConnectionTypeOneOf, IdpConnection, AuthenticatorConnection, IdentityProfile, CustomField, V1CustomValue, V1CustomValueValueOneOf, V1ListValue, V1MapValue, SecondaryEmail, Phone, AddressWrapper, Address, Metadata, Email, StatusV2, CaptchaToken, CaptchaTokenTokenOneOf, LoginResponse, State, LoginRequest, LoginId, LoginIdTypeOneOf, SuccessfulLoginEvent, RegisterV2Request, StateMachineResponse, CustomValue, CustomValueValueOneOf, ListValue, MapValue, LoginV2Request, ChangePasswordRequest, ChangePasswordResponse, LoginWithIdpConnectionRequest, RawHttpResponse, HeadersEntry, RawHttpRequest, PathParametersEntry, QueryParametersEntry, LoginCallbackRequest, LoginWithIdpConnectionTokenParamsRequest, ProceedToNextStateRequest, SignOnRequest, SignOnResponse, LogoutRequest, DomainEvent, DomainCreatedEvent, DomainDeletedEvent, DomainUpdatedEvent, DomainActionEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityUpdatedEvent, EntityDeletedEvent, ActionEvent, LoginResponseNonNullableFields, StateMachineResponseNonNullableFields, SignOnResponseNonNullableFields, RawHttpResponseNonNullableFields, RegisterOptions, LoginOptions, RegisterV2Options, LoginV2Options, LoginWithIdpConnectionTokenParamsOptions, ProceedToNextStateOptions, SignOnOptions, LogoutOptions, } from './iam-authentication-v1-authentication-authentication.universal';
export { onAuthenticationSuccessfulLoginEvent } from './iam-authentication-v1-authentication-authentication.universal';
