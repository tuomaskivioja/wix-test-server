export interface Authentication {
}
export interface RegisterRequest {
    identity: Identity;
    /** TODO: when this becomes required, it will make more sense for it to be a `string` */
    authenticatorId?: string | null;
    inputs?: Record<string, string>;
    captchaTokens?: CaptchaToken[];
}
export interface Identity {
    /** Identity ID */
    id?: string | null;
    /** Identifiers */
    identifiers?: Identifier[];
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes.
     * For an update operation to succeed, you MUST pass the latest revision.
     */
    revision?: string | null;
    /**
     * The time this identity was created.
     * @readonly
     */
    createdDate?: Date;
    /**
     * The time this identity was last updated.
     * @readonly
     */
    updatedDate?: Date;
    /** The identity configured connections to authenticate with. */
    connections?: Connection[];
    /** Identity profile. */
    identityProfile?: IdentityProfile;
    /**
     * Additional information about the identity that can impact user access.
     * This data cannot be set.
     */
    metadata?: Metadata;
    /** Identity email address. */
    email?: Email;
    /** Identity's current status. */
    status?: StatusV2;
    /** filled by pre registered spi */
    customAttributes?: Record<string, any> | null;
}
export interface Identifier extends IdentifierValueOneOf {
    email?: string;
    userName?: string;
}
/** @oneof */
export interface IdentifierValueOneOf {
    email?: string;
    userName?: string;
}
export interface Connection extends ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
/** @oneof */
export interface ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
export interface IdpConnection {
    /** IDP connection ID. */
    idpConnectionId?: string;
    /** IDP user ID. */
    idpUserId?: string;
}
export interface AuthenticatorConnection {
    /** Authenticator connection ID. */
    authenticatorConnectionId?: string;
    /** Whether re-enrollment is required. */
    reEnrollmentRequired?: boolean;
}
export interface IdentityProfile {
    /** Profile first name. */
    firstName?: string | null;
    /** Profile last name. */
    lastName?: string | null;
    /** Profile nickname. */
    nickname?: string | null;
    /** Profile picture URL. */
    picture?: string | null;
    /** Deprecated. Use `secondaryEmails` instead. */
    emails?: string[];
    /** Deprecated. Use `phonesV2` instead. */
    phones?: string[];
    /** List of profile labels. */
    labels?: string[];
    /** Profile language. */
    language?: string | null;
    /** Profile privacy status. */
    privacyStatus?: PrivacyStatus;
    /**
     * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site or app's contacts.
     */
    customFields?: CustomField[];
    /** List of profile email addresses. */
    secondaryEmails?: SecondaryEmail[];
    /** List of profile phone numbers. */
    phonesV2?: Phone[];
    /** List of profile physical addresses. */
    addresses?: AddressWrapper[];
    /** Company name. */
    company?: string | null;
    /** Position within company. */
    position?: string | null;
    /** Profile birthdate - ISO-8601 extended local date format (YYYY-MM-DD). */
    birthdate?: string | null;
}
export declare enum PrivacyStatus {
    UNDEFINED = "UNDEFINED",
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE"
}
export interface CustomField {
    /**
     * Custom field name. The name must match one of the key properties of the objects returned by
     * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)
     * with the `custom.` prefix removed.
     */
    name?: string;
    /** Custom field value. */
    value?: V1CustomValue;
}
export interface V1CustomValue extends V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: V1ListValue;
    /** Map value. */
    mapValue?: V1MapValue;
}
/** @oneof */
export interface V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: V1ListValue;
    /** Map value. */
    mapValue?: V1MapValue;
}
export interface V1ListValue {
    /** Custom value. */
    value?: V1CustomValue[];
}
export interface V1MapValue {
    /** Mapped custom value. */
    value?: Record<string, V1CustomValue>;
}
export interface SecondaryEmail {
    /** Email address. */
    email?: string;
    /** Email tag. */
    tag?: EmailTag;
}
export declare enum EmailTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    WORK = "WORK"
}
export interface Phone {
    /** Phone country code. */
    countryCode?: string | null;
    /** Phone number. */
    phone?: string;
    /** Phone tag. */
    tag?: PhoneTag;
}
export declare enum PhoneTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    MOBILE = "MOBILE",
    WORK = "WORK",
    FAX = "FAX"
}
export interface AddressWrapper {
    /** Address. */
    address?: Address;
    /** Address tag. */
    tag?: AddressTag;
}
/** Physical address */
export interface Address {
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
export declare enum AddressTag {
    UNTAGGED = "UNTAGGED",
    HOME = "HOME",
    WORK = "WORK",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface Metadata {
    /**
     * represents general tags such as "isOwner", "isContributor"
     * @readonly
     */
    tags?: string[];
}
export interface Email {
    address?: string;
    isVerified?: boolean;
}
export interface StatusV2 {
    name?: StatusName;
    reasons?: Reason[];
}
export declare enum StatusName {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    DELETED = "DELETED",
    BLOCKED = "BLOCKED",
    OFFLINE = "OFFLINE"
}
export declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    PENDING_ADMIN_APPROVAL_REQUIRED = "PENDING_ADMIN_APPROVAL_REQUIRED",
    PENDING_EMAIL_VERIFICATION_REQUIRED = "PENDING_EMAIL_VERIFICATION_REQUIRED"
}
export interface CaptchaToken extends CaptchaTokenTokenOneOf {
    Recaptcha?: string;
    InvisibleRecaptcha?: string;
}
/** @oneof */
export interface CaptchaTokenTokenOneOf {
    Recaptcha?: string;
    InvisibleRecaptcha?: string;
}
export interface LoginResponse {
    state?: State;
    sessionToken?: string | null;
    identity?: Identity;
    connection?: Connection;
    additionalData?: Record<string, V1CustomValue>;
}
export interface State {
    status?: StateStatus;
    stateToken?: string | null;
}
export declare enum StateStatus {
    DONE = "DONE",
    REQUIRE_OWNER_APPROVAL = "REQUIRE_OWNER_APPROVAL",
    STATUS_CHECK = "STATUS_CHECK"
}
export interface LoginRequest {
    identifier: Identifier;
    /** TODO: when this becomes required, it will make more sense for it to be a `string` */
    authenticatorId?: string | null;
    inputs?: Record<string, string>;
    captchaTokens?: CaptchaToken[];
    /** the identifier of the identity */
    loginId?: LoginId;
}
export interface LoginId extends LoginIdTypeOneOf {
    /** Login email address. */
    email?: string;
}
/** @oneof */
export interface LoginIdTypeOneOf {
    /** Login email address. */
    email?: string;
}
export interface SuccessfulLoginEvent {
    identity?: Identity;
}
export interface RegisterV2Request {
    /** Identifier of registering member. */
    loginId: LoginId;
    /** Password of registering member. */
    password?: string;
    /** Profile information of registering member. */
    profile?: IdentityProfile;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data, relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
export interface StateMachineResponse {
    /** The current state of the login or registration process. */
    state?: StateType;
    /** If state is `SUCCESS`, a session token. */
    sessionToken?: string | null;
    /** A token representing the current state of the login or registration process. */
    stateToken?: string | null;
    /** Identing of the current member. */
    identity?: Identity;
    /** additional_data = 5; //TBD */
    additionalData?: Record<string, CustomValue>;
}
export declare enum StateType {
    /** Initial unknown state. */
    UNKNOWN_STATE = "UNKNOWN_STATE",
    /** The operation completed successfully. */
    SUCCESS = "SUCCESS",
    /** State that indicates that the member needs owner approval to proceed, available action in: OwnerApprovalStateHandler */
    REQUIRE_OWNER_APPROVAL = "REQUIRE_OWNER_APPROVAL",
    /**
     * State that indicates a member waiting for verification, available action are: verifyDuringAuthentication or resendDuringAuthentication
     * https://dev.wix.com/docs/rest/api-reference/auth-management/verification-v1/verify-during-authentication
     */
    REQUIRE_EMAIL_VERIFICATION = "REQUIRE_EMAIL_VERIFICATION",
    /** State that indicates checking that the status is not one of the `invalidStates` before proceeding. */
    STATUS_CHECK = "STATUS_CHECK"
}
export interface CustomValue extends CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
/** @oneof */
export interface CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
export interface ListValue {
    /** Custom value. */
    value?: CustomValue[];
}
export interface MapValue {
    /** Mapped custom value. */
    value?: Record<string, CustomValue>;
}
export interface LoginV2Request {
    /** Identifier of member logging in. */
    loginId: LoginId;
    /** Password of the member logging in. */
    password?: string;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
}
export interface ChangePasswordRequest {
    /** The new password to set for the logged in user */
    newPassword: string;
}
export interface ChangePasswordResponse {
}
export interface LoginWithIdpConnectionRequest {
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData */
    idpConnectionId?: string;
    /** The id of the tenant the caller wants to login into */
    tenantId?: string;
    /** The type of the tenant the caller wants to login into */
    tenantType?: TenantType;
    customPayload?: Record<string, string>;
    /**
     * This flow ultimately returns an HTML page that asynchronously posts the LoginResponse via the BroadcastChannel API.
     * The message will be posted to a channel named `wix-idp-$session_id`, and encrypted with the `encryption_key`.
     * Encryption key should be base64 encoded. Encryption is done using AES-GCM with a random IV that's sent alongside the payload
     */
    sessionId?: string;
    encryptionKey?: string;
    visitorId?: string | null;
    bsi?: string | null;
}
export declare enum TenantType {
    UNKNOWN_TENANT_TYPE = "UNKNOWN_TENANT_TYPE",
    ACCOUNT = "ACCOUNT",
    SITE = "SITE",
    ROOT = "ROOT"
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface RawHttpRequest {
    body?: Uint8Array;
    pathParams?: PathParametersEntry[];
    queryParams?: QueryParametersEntry[];
    headers?: HeadersEntry[];
    method?: string;
    rawPath?: string;
    rawQuery?: string;
}
export interface PathParametersEntry {
    key?: string;
    value?: string;
}
export interface QueryParametersEntry {
    key?: string;
    value?: string;
}
export interface LoginCallbackRequest {
    /** state that that received on the redirect */
    state?: string;
    /** session token */
    sessionToken?: string;
}
export interface LoginWithIdpConnectionTokenParamsRequest {
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData */
    idpConnectionId?: string;
    /** A set of fields that are required for the connection to be able to identify and authenticate the user */
    tokenParams?: Record<string, string>;
}
export interface ProceedToNextStateRequest {
    /** State token received from the previous step in the registration or login process. */
    stateToken?: string;
}
export interface SignOnRequest {
    /** the identifier of the identity */
    loginId: LoginId;
    /** profile of the identity */
    profile?: IdentityProfile;
    /** when true will mark the email of the identity as verified */
    verifyEmail?: boolean;
    /** when false will create a new contact instead of merging the existing contact into the identity */
    mergeExistingContact?: boolean;
}
export interface SignOnResponse {
    /** session token for the requested identity */
    sessionToken?: string;
    /** The Identity of the provided login_id */
    identity?: Identity;
}
/** logout request payload */
export interface LogoutRequest {
    /** redirect after logout */
    postLogoutRedirectUri?: string | null;
    /** caller identifier */
    clientId?: string | null;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp. */
    eventTime?: Date;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface LoginResponseNonNullableFields {
    state?: {
        status: StateStatus;
    };
    identity?: {
        identifiers: {
            email: string;
            userName: string;
        }[];
        connections: {
            idpConnection?: {
                idpConnectionId: string;
                idpUserId: string;
            };
            authenticatorConnection?: {
                authenticatorConnectionId: string;
                reEnrollmentRequired: boolean;
            };
        }[];
        identityProfile?: {
            emails: string[];
            phones: string[];
            labels: string[];
            privacyStatus: PrivacyStatus;
            customFields: {
                name: string;
                value?: {
                    strValue: string;
                    numValue: number;
                    listValue?: {
                        value: NonNullable<NonNullable<NonNullable<NonNullable<LoginResponseNonNullableFields>['identity']>['identityProfile']>['customFields'][0]>['value'][];
                    };
                };
            }[];
            secondaryEmails: {
                email: string;
                tag: EmailTag;
            }[];
            phonesV2: {
                phone: string;
                tag: PhoneTag;
            }[];
            addresses: {
                tag: AddressTag;
            }[];
        };
        metadata?: {
            tags: string[];
        };
        email?: {
            address: string;
            isVerified: boolean;
        };
        status?: {
            name: StatusName;
            reasons: Reason[];
        };
    };
    connection?: {
        idpConnection?: {
            idpConnectionId: string;
            idpUserId: string;
        };
        authenticatorConnection?: {
            authenticatorConnectionId: string;
            reEnrollmentRequired: boolean;
        };
    };
    additionalData?: {
        strValue: string;
        numValue: number;
        listValue?: {
            value: NonNullable<LoginResponseNonNullableFields>['additionalData'][];
        };
    };
}
export interface StateMachineResponseNonNullableFields {
    state: StateType;
    identity?: {
        identifiers: {
            email: string;
            userName: string;
        }[];
        connections: {
            idpConnection?: {
                idpConnectionId: string;
                idpUserId: string;
            };
            authenticatorConnection?: {
                authenticatorConnectionId: string;
                reEnrollmentRequired: boolean;
            };
        }[];
        identityProfile?: {
            emails: string[];
            phones: string[];
            labels: string[];
            privacyStatus: PrivacyStatus;
            customFields: {
                name: string;
                value?: {
                    strValue: string;
                    numValue: number;
                    listValue?: {
                        value: NonNullable<NonNullable<NonNullable<NonNullable<StateMachineResponseNonNullableFields>['identity']>['identityProfile']>['customFields'][0]>['value'][];
                    };
                };
            }[];
            secondaryEmails: {
                email: string;
                tag: EmailTag;
            }[];
            phonesV2: {
                phone: string;
                tag: PhoneTag;
            }[];
            addresses: {
                tag: AddressTag;
            }[];
        };
        metadata?: {
            tags: string[];
        };
        email?: {
            address: string;
            isVerified: boolean;
        };
        status?: {
            name: StatusName;
            reasons: Reason[];
        };
    };
    additionalData?: {
        strValue: string;
        numValue: number;
        listValue?: {
            value: NonNullable<StateMachineResponseNonNullableFields>['additionalData'][];
        };
    };
}
export interface SignOnResponseNonNullableFields {
    sessionToken: string;
    identity?: {
        identifiers: {
            email: string;
            userName: string;
        }[];
        connections: {
            idpConnection?: {
                idpConnectionId: string;
                idpUserId: string;
            };
            authenticatorConnection?: {
                authenticatorConnectionId: string;
                reEnrollmentRequired: boolean;
            };
        }[];
        identityProfile?: {
            emails: string[];
            phones: string[];
            labels: string[];
            privacyStatus: PrivacyStatus;
            customFields: {
                name: string;
                value?: {
                    strValue: string;
                    numValue: number;
                    listValue?: {
                        value: NonNullable<NonNullable<NonNullable<NonNullable<SignOnResponseNonNullableFields>['identity']>['identityProfile']>['customFields'][0]>['value'][];
                    };
                };
            }[];
            secondaryEmails: {
                email: string;
                tag: EmailTag;
            }[];
            phonesV2: {
                phone: string;
                tag: PhoneTag;
            }[];
            addresses: {
                tag: AddressTag;
            }[];
        };
        metadata?: {
            tags: string[];
        };
        email?: {
            address: string;
            isVerified: boolean;
        };
        status?: {
            name: StatusName;
            reasons: Reason[];
        };
    };
}
export interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: {
        key: string;
        value: string;
    }[];
}
