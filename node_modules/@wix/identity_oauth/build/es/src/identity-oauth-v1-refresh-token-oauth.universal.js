import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixIdentityOauthV1RefreshToken from './identity-oauth-v1-refresh-token-oauth.http';
/**
 * Creates an access token.
 *
 *
 * The endpoint accepts raw HTTP requests. You must pass the request's body
 * parameters formatted as bytes in the raw HTTP request's `body` field,
 * following this template:
 * `{"grantType": "client_credentials", "client_id": "<APP_ID>", "client_secret": "<APP_SECRET_KEY>", "instance_id": "<INSTANCE_ID>"}`.
 *
 * When the call succeeds, Wix returns `{"statusCode": 200}` and the created access
 * token in the `body` field of the raw HTTP response.
 *
 * In case the call fails, Wix returns the relevant `4XX` error code in the raw
 * HTTP response's `statusCode` field and details
 * about the error in `body`. Error details follow the
 * [conventions of the Internet Engineering Task Force (IETF)](https://datatracker.ietf.org/doc/html/rfc6749#appendix-A.7).
 * @public
 * @documentationMaturity preview
 */
export async function token(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        body: options?.body,
        pathParams: options?.pathParams,
        queryParams: options?.queryParams,
        headers: options?.headers,
        method: options?.method,
        rawPath: options?.rawPath,
        rawQuery: options?.rawQuery,
    });
    const reqOpts = ambassadorWixIdentityOauthV1RefreshToken.token(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                body: '$[0].body',
                pathParams: '$[0].pathParams',
                queryParams: '$[0].queryParams',
                headers: '$[0].headers',
                method: '$[0].method',
                rawPath: '$[0].rawPath',
                rawQuery: '$[0].rawQuery',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=identity-oauth-v1-refresh-token-oauth.universal.js.map